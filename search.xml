<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最近做的Leetcode上深度优先和回溯算法的问题</title>
      <link href="/2020/04/26/Leetcode-Learning/"/>
      <url>/2020/04/26/Leetcode-Learning/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.commany;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[]arr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span>[] visted = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">findMinHeightTrees</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span>[][] edges)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            ans.add(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] weight = <span class="keyword">new</span> <span class="keyword">int</span>[n]; <span class="comment">// 存储各节点度数目</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; adjacencyList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)&#123;</span><br><span class="line">            adjacencyList.add(<span class="keyword">new</span> ArrayList&lt;&gt;());<span class="comment">// 邻接表初始化</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] cur : edges) &#123;</span><br><span class="line">            <span class="keyword">int</span> first = cur[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> second = cur[<span class="number">1</span>];</span><br><span class="line">            weight[first]++;</span><br><span class="line">            weight[second]++;</span><br><span class="line">            adjacencyList.get(first).add(second);</span><br><span class="line">            adjacencyList.get(second).add(first);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先存边缘节点</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (weight[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> size = queue.size();</span><br><span class="line">            ans.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123; <span class="comment">// 每轮取出边缘节点加入新“边缘”节点</span></span><br><span class="line">                <span class="keyword">int</span> curN = queue.poll();</span><br><span class="line">                ans.add(curN);</span><br><span class="line">                List&lt;Integer&gt; nextN = adjacencyList.get(curN); <span class="comment">// 得到边缘节点的邻接节点</span></span><br><span class="line">                <span class="keyword">for</span> (Integer temp: nextN)&#123;</span><br><span class="line">                    weight[temp]--;</span><br><span class="line">                    <span class="keyword">if</span> (weight[temp]==<span class="number">1</span>)&#123;</span><br><span class="line">                        queue.add(temp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDistance</span><span class="params">(<span class="keyword">int</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = grid.length; <span class="comment">//行</span></span><br><span class="line">        <span class="keyword">int</span> n = grid[<span class="number">0</span>].length; <span class="comment">//列</span></span><br><span class="line">        <span class="keyword">int</span>[] x = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>&#125;; <span class="comment">//方向</span></span><br><span class="line">        <span class="keyword">int</span>[] y = &#123;<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>&#125;; <span class="comment">//方向</span></span><br><span class="line">        <span class="keyword">int</span>[] temp=<span class="keyword">null</span>;</span><br><span class="line">        Queue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> hasOcean = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 陆地入队列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i, j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            hasOcean = <span class="keyword">true</span>;</span><br><span class="line">            temp = queue.poll(); <span class="comment">// 取出坐标&#123;x, y&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123; <span class="comment">// 开始“寻路”</span></span><br><span class="line">                <span class="keyword">int</span> newX = x[i]+temp[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">int</span> newY = y[i]+temp[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (newX&gt;=m || newX &lt;<span class="number">0</span> || newY&gt;=n || newY&lt;<span class="number">0</span> || grid[newX][newY] !=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                grid[newX][newY] = grid[temp[<span class="number">0</span>]][temp[<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;newX, newY&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="keyword">null</span> || !hasOcean)<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> grid[temp[<span class="number">0</span>]][temp[<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印1-n的所有可能组成情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fullSortN</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; k;i++)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!visted[i])&#123;</span><br><span class="line">                visted[i] = <span class="keyword">true</span>;</span><br><span class="line">                arr[i] = n;</span><br><span class="line">                <span class="comment">//n-1表示进入第几层栈帧</span></span><br><span class="line">                fullSortN(n-<span class="number">1</span>);</span><br><span class="line">                visted[i] = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印1-n的所有可能组成情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fullSortN</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> len, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k==len)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i&lt; len;i++)&#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;len;i++)<span class="comment">//当前位置为k，依次和后面的位置交换</span></span><br><span class="line">        &#123;</span><br><span class="line">            swap(arr,k,i);</span><br><span class="line">            fullSortN(arr,len,k+<span class="number">1</span>);</span><br><span class="line">            swap(arr,k,i); <span class="comment">//回溯</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//N皇后问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">char</span>[][] broad = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                broad[i][j] = <span class="string">'.'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(broad,<span class="number">0</span>,n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">ifConflict</span><span class="params">(<span class="keyword">char</span>[][] broad, <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;broad[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (broad[i][j]==<span class="string">'Q'</span> &amp;&amp; (col==j || (row+col==i+j)||(row-col==i-j)))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">char</span>[][] broad,<span class="keyword">int</span> row, <span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row==N)&#123;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">                list.add(Arrays.toString(broad[i]).replace(<span class="string">'['</span>, <span class="string">' '</span>).replace(<span class="string">']'</span>, <span class="string">' '</span>).replace(<span class="string">','</span>, <span class="string">' '</span>).replace(<span class="string">" "</span>,<span class="string">""</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(list);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col=<span class="number">0</span>;col&lt;N;col++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ifConflict(broad, row, col))&#123;</span><br><span class="line">                    broad[row][col] = <span class="string">'Q'</span>;</span><br><span class="line">                    dfs(broad,row+<span class="number">1</span>,N);</span><br><span class="line">                    broad[row][col] = <span class="string">'.'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Main main = <span class="keyword">new</span> Main();</span><br><span class="line">        System.out.print(<span class="string">"Please input n: "</span>);</span><br><span class="line">        <span class="keyword">int</span> n = input.nextInt();</span><br><span class="line">        main.solveNQueens(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;res.size(); i++)&#123;</span><br><span class="line">            List&lt;String&gt; l = res.get(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;l.size();j++)&#123;</span><br><span class="line">                System.out.println(l.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        k=n;</span></span><br><span class="line"><span class="comment">//        arr = new int[n];</span></span><br><span class="line"><span class="comment">//        visted = new boolean[n];</span></span><br><span class="line"><span class="comment">//        fullSortN(n);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        arr = new int[n];</span></span><br><span class="line"><span class="comment">//        // 赋初值&#123;1,2,3...n&#125;</span></span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;n;i++)&#123;</span></span><br><span class="line"><span class="comment">//            arr[i] = i+1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        fullSortN(arr, n, 0);</span></span><br><span class="line">        System.out.println(<span class="string">"count:"</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Learning Note</title>
      <link href="/2020/01/22/Java-Learning-Note/"/>
      <url>/2020/01/22/Java-Learning-Note/</url>
      
        <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>在计算机科学中，反射是指计算机程序在运行时（Run time）可以访问、检测和修改它本身状态或行为的一种能力</p><p>#java反射<br>java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣影评并生成词云</title>
      <link href="/2019/06/12/%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E5%B9%B6%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
      <url>/2019/06/12/%E8%B1%86%E7%93%A3%E5%BD%B1%E8%AF%84%E5%B9%B6%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</url>
      
        <content type="html"><![CDATA[<h1 id="豆瓣影评爬虫-amp-生成词云"><a href="#豆瓣影评爬虫-amp-生成词云" class="headerlink" title="豆瓣影评爬虫&amp;生成词云"></a>豆瓣影评爬虫&amp;生成词云</h1><p>参考了某老哥代码，代码运行前需提供</p><ul><li>背景图路径(bg_1.png)</li><li>Cookie</li><li>安装mongo<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud, ImageColorGenerator</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_comments</span><span class="params">(url, headers, start, max_restart_num, movie_name, collection)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= <span class="number">500</span>:</span><br><span class="line">        print(<span class="string">"已爬取500条评论,结束爬取"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'start'</span>: start,</span><br><span class="line">        <span class="string">'limit'</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">'sort'</span>: <span class="string">'new_score'</span>,</span><br><span class="line">        <span class="string">'status'</span>: <span class="string">'P'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers, params=data)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    comment_item = tree.xpath(<span class="string">'//div[@id ="comments"]/div[@class="comment-item"]'</span>)</span><br><span class="line">    len_comments = len(comment_item)</span><br><span class="line">    <span class="keyword">if</span> len_comments &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len_comments + <span class="number">1</span>):</span><br><span class="line">            votes = tree.xpath(<span class="string">'//div[@id ="comments"]/div[@class="comment-item"][&#123;&#125;]//span[@class="votes"]'</span>.format(i))</span><br><span class="line">            commenters = tree.xpath(</span><br><span class="line">                <span class="string">'//div[@id ="comments"]/div[@class="comment-item"][&#123;&#125;]//span[@class="comment-info"]/a'</span>.format(i))</span><br><span class="line">            ratings = tree.xpath(</span><br><span class="line">                <span class="string">'//div[@id ="comments"]/div[@class="comment-item"][&#123;&#125;]//span[@class="comment-info"]/span[contains(@class,"rating")]/@title'</span>.format(</span><br><span class="line">                    i))</span><br><span class="line">            comments_time = tree.xpath(</span><br><span class="line">                <span class="string">'//div[@id ="comments"]/div[@class="comment-item"][&#123;&#125;]//span[@class="comment-info"]/span[@class="comment-time "]'</span>.format(</span><br><span class="line">                    i))</span><br><span class="line">            comments = tree.xpath(</span><br><span class="line">                <span class="string">'//div[@id ="comments"]/div[@class="comment-item"][&#123;&#125;]/div[@class="comment"]/p/span[@class="short"]'</span>.format(i))</span><br><span class="line"></span><br><span class="line">            vote = (votes[<span class="number">0</span>].text.strip())</span><br><span class="line">            commenter = (commenters[<span class="number">0</span>].text.strip())</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                rating = (str(ratings[<span class="number">0</span>]))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                rating = <span class="string">'null'</span></span><br><span class="line">            comment_time = (comments_time[<span class="number">0</span>].text.strip())</span><br><span class="line">            <span class="comment"># print('comment', comments)</span></span><br><span class="line">            comment = (comments[<span class="number">0</span>].text.strip())</span><br><span class="line"></span><br><span class="line">            comment_dict = &#123;&#125;</span><br><span class="line">            comment_dict[<span class="string">'vote'</span>] = vote</span><br><span class="line">            comment_dict[<span class="string">'commenter'</span>] = commenter</span><br><span class="line">            comment_dict[<span class="string">'rating'</span>] = rating</span><br><span class="line">            comment_dict[<span class="string">'comments_time'</span>] = comment_time</span><br><span class="line">            comment_dict[<span class="string">'comments'</span>] = comment</span><br><span class="line"></span><br><span class="line">            comment_dict[<span class="string">'movie_name'</span>] = movie_name</span><br><span class="line">            <span class="comment"># 存入数据库</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">"正在存取第&#123;&#125;条数据"</span>.format(start+i))</span><br><span class="line">            print(comment_dict, collection)</span><br><span class="line">            collection.update(&#123;<span class="string">'commenter'</span>: comment_dict[<span class="string">'commenter'</span>]&#125;, &#123;<span class="string">'$setOnInsert'</span>: comment_dict&#125;, upsert=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">        headers[<span class="string">'Referer'</span>] = response.url</span><br><span class="line">        start += <span class="number">20</span></span><br><span class="line">        data[<span class="string">'start'</span>] = start</span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> get_comments(url, headers, start, max_restart_num, movie_name, collection)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> max_restart_num &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">"fail to crawl ,waiting 10s to restart continuing crawl..."</span>)</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">                print(start)</span><br><span class="line">                <span class="keyword">return</span> get_comments(url, headers, start, max_restart_num<span class="number">-1</span>, movie_name, collection)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"finished crawling"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"max_restart_num has run out"</span>)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'log.txt'</span>,<span class="string">"a"</span>) <span class="keyword">as</span> fp:</span><br><span class="line">                fp.write(<span class="string">'\n&#123;&#125;--latest start:&#123;&#125;'</span>.format(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime(time.time())), start))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_words_frequency</span><span class="params">(collection, stop_set, movie_name)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    中文分词并返回词频</span></span><br><span class="line"><span class="string">    :param collection: 数据库的table表</span></span><br><span class="line"><span class="string">    :param stop_set: 停用词集</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    array = collection.find(&#123;<span class="string">"movie_name"</span>: movie_name&#125;, &#123;<span class="string">"comments"</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    words_list = []</span><br><span class="line">    <span class="keyword">for</span> doc <span class="keyword">in</span> array:</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># print('doc', doc['comments'])</span></span><br><span class="line">        comment = doc[<span class="string">'comments'</span>]</span><br><span class="line">        t_list = jieba.lcut(str(comment), cut_all=<span class="keyword">False</span>)</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> t_list:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">not</span> <span class="keyword">in</span> stop_set <span class="keyword">and</span> <span class="number">5</span> &gt; len(word) &gt; <span class="number">1</span>:</span><br><span class="line">                words_list.append(word)</span><br><span class="line">        dict1 = dict(Counter(words_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify_frequenc</span><span class="params">(word_dict, minment=<span class="number">5</span>)</span>:</span></span><br><span class="line">    num = minment - <span class="number">1</span></span><br><span class="line">    dict = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> word_dict.items() <span class="keyword">if</span> v &gt; num&#125;</span><br><span class="line">    <span class="comment"># print('word_dict', word_dict)</span></span><br><span class="line">    <span class="keyword">return</span> dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_stopwords_set</span><span class="params">(stopwords_path)</span>:</span></span><br><span class="line">    stop_set = set()</span><br><span class="line">    <span class="keyword">with</span> open(str(stopwords_path), <span class="string">'r'</span>, encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        line=fp.readline()</span><br><span class="line">        <span class="keyword">while</span> line <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> line != <span class="string">""</span>:</span><br><span class="line">            print(<span class="string">'屏蔽词：'</span>, line.strip())</span><br><span class="line">            stop_set.add(line.strip())</span><br><span class="line">            line = fp.readline()</span><br><span class="line">            <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="keyword">return</span> stop_set</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_wordcloud</span><span class="params">(dict, title, save=False)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param dict: 词频字典</span></span><br><span class="line"><span class="string">    :param title: 标题(电影名)</span></span><br><span class="line"><span class="string">    :param save: 是否保存到本地</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 词云设置</span></span><br><span class="line">    mask_color_path = <span class="string">"bg_1.png"</span>  <span class="comment"># 设置背景图片路径</span></span><br><span class="line">    font_path = <span class="string">'C:/Windows/Fonts/simhei.ttf'</span>  <span class="comment"># 为matplotlib设置中文字体路径没</span></span><br><span class="line">    imgname1 = <span class="string">"color_by_defualut.png"</span>  <span class="comment"># 保存的图片名字1(只按照背景图片形状)</span></span><br><span class="line">    imgname2 = <span class="string">"color_by_img.png"</span>  <span class="comment"># 保存的图片名字2(颜色按照背景图片颜色布局生成)</span></span><br><span class="line">    width = <span class="number">1000</span></span><br><span class="line">    height = <span class="number">860</span></span><br><span class="line">    margin = <span class="number">2</span></span><br><span class="line">    <span class="comment"># 设置背景图片</span></span><br><span class="line">    mask_coloring = imread(mask_color_path)</span><br><span class="line">    <span class="comment"># 设置WordCloud属性</span></span><br><span class="line">    wc = WordCloud(font_path=font_path,  <span class="comment"># 设置字体</span></span><br><span class="line">                   background_color=<span class="string">"white"</span>,  <span class="comment"># 背景颜色</span></span><br><span class="line">                   max_words=<span class="number">150</span>,  <span class="comment"># 词云显示的最大词数</span></span><br><span class="line">                   mask=mask_coloring,  <span class="comment"># 设置背景图片</span></span><br><span class="line">                   max_font_size=<span class="number">200</span>,  <span class="comment"># 字体最大值</span></span><br><span class="line">                   <span class="comment"># random_state=42,</span></span><br><span class="line">                   width=width, height=height, margin=margin,  <span class="comment"># 设置图片默认的大小,但是如果使用背景图片的话,那么保存的图片大小将会按照其大小保存,margin为词语边缘距离</span></span><br><span class="line">                   )</span><br><span class="line">    <span class="comment"># 生成词云</span></span><br><span class="line">    wc.generate_from_frequencies(dict)</span><br><span class="line"></span><br><span class="line">    bg_color = ImageColorGenerator(mask_coloring)</span><br><span class="line">    <span class="comment"># 重定义字体颜色</span></span><br><span class="line">    wc.recolor(color_func=bg_color)</span><br><span class="line">    <span class="comment"># 定义自定义字体，文件名从1.b查看系统中文字体中来</span></span><br><span class="line">    myfont = FontProperties(fname=font_path)</span><br><span class="line">    plt.figure()</span><br><span class="line">    plt.title(title, fontproperties=myfont)</span><br><span class="line">    plt.imshow(wc)</span><br><span class="line">    plt.axis(<span class="string">"off"</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> save <span class="keyword">is</span> <span class="keyword">True</span>:  <span class="comment"># 保存到</span></span><br><span class="line">        wc.to_file(imgname2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    key = input(<span class="string">"请输入电影名: "</span>)</span><br><span class="line">    base_url = <span class="string">'https://movie.douban.com/subject_search?'</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'cat'</span>: <span class="number">1002</span>,</span><br><span class="line">        <span class="string">'search_text'</span>: key,</span><br><span class="line">    &#125;</span><br><span class="line">    specific_url = base_url + urlencode(params)</span><br><span class="line">    browser = webdriver.Chrome()</span><br><span class="line">    browser.get(specific_url)</span><br><span class="line">    specific_page = browser.find_element_by_xpath(<span class="string">"//*[@class='item-root']/a[@class='cover-link']"</span>)</span><br><span class="line">    specific_page.click()</span><br><span class="line">    film_view_url = browser.current_url</span><br><span class="line">    <span class="comment"># print(film_view_url)</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'自己填'</span>,</span><br><span class="line">        <span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'movie.douban.com'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    start = <span class="number">0</span></span><br><span class="line">    response = requests.get(film_view_url, headers)</span><br><span class="line">    tree = etree.HTML(response.text)</span><br><span class="line">    movie_name = tree.xpath(<span class="string">'//div[@id="content"]/h1/span'</span>)[<span class="number">0</span>].text.strip()</span><br><span class="line">    print(<span class="string">'电影名称（全称）：'</span>, movie_name)</span><br><span class="line">    url = film_view_url+<span class="string">'/comments'</span></span><br><span class="line"></span><br><span class="line">    stopwords_path = <span class="string">'stopwords.txt'</span></span><br><span class="line">    stop_set = load_stopwords_set(stopwords_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 数据库连接</span></span><br><span class="line">    client = MongoClient(<span class="string">'localhost'</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client[<span class="string">"douban"</span>]</span><br><span class="line">    collection = db[movie_name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># # # 抓取评论 保存到数据库</span></span><br><span class="line">        get_comments(url, headers, start, <span class="number">5</span>, movie_name, collection)</span><br><span class="line">        <span class="comment"># 从数据库获取评论 并分好词</span></span><br><span class="line">        frequency_dict = get_words_frequency(collection, stop_set, movie_name)</span><br><span class="line">        <span class="comment"># 对词频进一步筛选</span></span><br><span class="line">        cl_dict = classify_frequenc(frequency_dict, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># print(frequency_dict)</span></span><br><span class="line">        <span class="comment"># 根据词频 生成词云</span></span><br><span class="line">        get_wordcloud(cl_dict, movie_name)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># pass</span></span><br><span class="line">        client.close()</span><br></pre></td></tr></table></figure></div></li></ul><p>参考链接:<br>忘了。。。</p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sspai热门文章栏爬虫</title>
      <link href="/2019/05/14/sspai%E7%83%AD%E9%97%A8%E6%96%87%E7%AB%A0%E6%A0%8F%E7%88%AC%E8%99%AB/"/>
      <url>/2019/05/14/sspai%E7%83%AD%E9%97%A8%E6%96%87%E7%AB%A0%E6%A0%8F%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="少数派网站热门文章栏数据爬虫"><a href="#少数派网站热门文章栏数据爬虫" class="headerlink" title="少数派网站热门文章栏数据爬虫"></a>少数派网站热门文章栏数据爬虫</h1><p><strong>网址：</strong><a href="https://sspai.com/tag/%E7%83%AD%E9%97%A8%E6%96%87%E7%AB%A0#home" target="_blank" rel="noopener">少数派热门文章</a><br><strong>代码如下：</strong><br>思路同《网络爬虫7》<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># import re</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'https://sspai.com/api/v1/articles?'</span>  <span class="comment"># Ajax请求的URL前半部分</span></span><br><span class="line">client = MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)  <span class="comment"># 创建MongoDB的连接对象</span></span><br><span class="line">db = client.sspai_storage  <span class="comment"># 指定要使用的数据库</span></span><br><span class="line">collection = db.sspai  <span class="comment"># 指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'sspai.com'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://sspai.com'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">&#125;  <span class="comment"># 请求头伪装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(number)</span>:</span>  <span class="comment"># 构造URL,请求JSON</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'recommend_to_home'</span>,</span><br><span class="line">        <span class="string">'offset'</span>: number,</span><br><span class="line">        <span class="string">'limit'</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="string">'tag'</span>: <span class="string">'热门文章'</span>,</span><br><span class="line">        <span class="string">'include_total'</span>: <span class="string">'false'</span>,</span><br><span class="line">        <span class="string">'has_tag'</span>: <span class="string">'1'</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = base_url+urlencode(params)  <span class="comment"># 完整URL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            data = json.loads(response.text)  <span class="comment"># 提取JSON格式</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(p_json)</span>:</span>  <span class="comment"># 解析JSON,提取数据</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        data_array = p_json.get(<span class="string">'list'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> data_array:</span><br><span class="line">            author_name = item.get(<span class="string">'author'</span>).get(<span class="string">'nickname'</span>)  <span class="comment"># 作者</span></span><br><span class="line">            likes_count = item.get(<span class="string">'likes_count'</span>)  <span class="comment"># 点赞数</span></span><br><span class="line">            words_count = item.get(<span class="string">'words_count'</span>)  <span class="comment"># 字数统计</span></span><br><span class="line">            title = item.get(<span class="string">'title'</span>)  <span class="comment"># 标题</span></span><br><span class="line">            summary = item.get(<span class="string">'summary'</span>)  <span class="comment"># 文章概要</span></span><br><span class="line">            filer_data = &#123;</span><br><span class="line">                <span class="string">'author_name'</span>: author_name,</span><br><span class="line">                <span class="string">'likes_count'</span>: likes_count,</span><br><span class="line">                <span class="string">'words_count'</span>: words_count,</span><br><span class="line">                <span class="string">'title'</span>: title,</span><br><span class="line">                <span class="string">'summary'</span>: summary,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">yield</span> filer_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_file</span><span class="params">(filer_data)</span>:</span>  <span class="comment"># 保存提取的数据到数据库,json格式</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"test.json"</span>, <span class="string">"a+"</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(filer_data, f, ensure_ascii=<span class="keyword">False</span>)</span><br><span class="line">        print(<span class="string">"上传完成"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100</span>):</span><br><span class="line">        get_json = get_page(page*<span class="number">20</span>)</span><br><span class="line">        results = parse_page(get_json)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            save_to_file(result)</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue响应式原理个人理解</title>
      <link href="/2019/04/17/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/"/>
      <url>/2019/04/17/Vue%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86%E4%B8%AA%E4%BA%BA%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue响应式系统"><a href="#Vue响应式系统" class="headerlink" title="Vue响应式系统"></a>Vue响应式系统</h1><ul><li>不能检测到对象属性的添加或删除</li><li>不支持通过索引设置数组成员</li></ul><h1 id="实现简易MVVM"><a href="#实现简易MVVM" class="headerlink" title="实现简易MVVM"></a>实现简易MVVM</h1><h2 id="MVVM定义"><a href="#MVVM定义" class="headerlink" title="MVVM定义"></a>MVVM定义</h2><p><img src="/images/Vue-4.png" alt=""><br>MVVM 的全称是 Model-View-ViewModel，它是一种架构模式，最早由微软提出，借鉴了 MVC 等模式的思想。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://juejin.im/post/5ca15e29f265da30a3303351" title="掘金某文章" target="_blank" rel="noopener"><strong>掘金某文章</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串 模式匹配</title>
      <link href="/2019/04/15/%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2019/04/15/%E5%AD%97%E7%AC%A6%E4%B8%B2-%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Learn_Algorithm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bfMatch</span><span class="params">(String target, String pattern)</span> </span>&#123;  <span class="comment">// 暴力破解法</span></span><br><span class="line">        <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在没找到匹配pattern的子串前，遍历整个target</span></span><br><span class="line">        <span class="keyword">while</span> (-<span class="number">1</span> == pos &amp;&amp; i &lt; target.length()-pattern.length()+<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将目标串和模式串逐一比对，如有不同则跳出</span></span><br><span class="line">            <span class="keyword">while</span> (j &lt; pattern.length() &amp;&amp; target.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (j == pattern.length()) &#123; <span class="comment">// 如果模式串扫描完，说明目标串中含有这个子串</span></span><br><span class="line">                pos = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 反之，没有扫描完，则从目标串的下一个字符开始重新逐一比对</span></span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">                k++;</span><br><span class="line">                i = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String target, String pattern, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (-<span class="number">1</span> != index) &#123;</span><br><span class="line">            System.out.format(<span class="string">"[%s] is in the Pos = %d of [%s]\n"</span>, pattern, index, target);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.format(<span class="string">"[%s] is not in the [%s]\n"</span>, pattern, target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算部分匹配表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNext(String pattern) &#123;  <span class="comment">// 例子:   A  B C A B</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>, k = -<span class="number">1</span>;                         <span class="comment">// 索引:   0  1 2 3 4</span></span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[pattern.length()];    <span class="comment">// next: -1  0 0 0 1</span></span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;                              <span class="comment">//j变化值: 1  2 3 4 5</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; pattern.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> == k || pattern.charAt(j) == pattern.charAt(k)) &#123; <span class="comment">// 3 0</span></span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">                next[j] = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// KMP算法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmpMatch</span><span class="params">(String target, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] next = getNext(pattern); <span class="comment">// 计算部分匹配表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; target.length() &amp;&amp; j &lt; pattern.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (-<span class="number">1</span> == j || target.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j]; <span class="comment">// 如果出现部分不匹配，获取跳过的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (j &gt;= pattern.length())</span><br><span class="line">            index = i - pattern.length(); <span class="comment">// 匹配成功，返回匹配子串的首字符下标</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            index = -<span class="number">1</span>; <span class="comment">// 匹配失败</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String target = <span class="string">"Silence"</span>;</span><br><span class="line">        String pattern = <span class="string">"ile"</span>;</span><br><span class="line">        String pattern2 = <span class="string">"Jin"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index = bfMatch(target, pattern);</span><br><span class="line">        <span class="keyword">int</span> index2 = bfMatch(target, pattern2);</span><br><span class="line">        print(target, pattern, index);</span><br><span class="line">        print(target, pattern2, index2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> index1 = kmpMatch(target, pattern);</span><br><span class="line">        System.out.format(<span class="string">"[%s] is in the pos = %d of [%s]"</span>, pattern, index1, target);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" title="阮一峰博客" target="_blank" rel="noopener"><strong>阮一峰博客</strong></a><br><a href="http://www.cnblogs.com/jingmoxukong/p/4343770.html" title="cnblogs某文章" target="_blank" rel="noopener"><strong>cnblogs某文章</strong></a><br><a href="https://www.jianshu.com/p/8b21a1d6af8b" title="简书某文章" target="_blank" rel="noopener"><strong>简书某文章</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Component</title>
      <link href="/2019/03/22/Vue-Component/"/>
      <url>/2019/03/22/Vue-Component/</url>
      
        <content type="html"><![CDATA[<h1 id="组件基础"><a href="#组件基础" class="headerlink" title="组件基础"></a>组件基础</h1><h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 Vue 组件的示例：</span></span><br><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#components-demo'</span> &#125;)</span><br></pre></td></tr></table></figure></div><p>组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 <button-counter>。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"components-demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></button-counter></p><p>因为组件是可复用的 Vue 实例，所以它们与 new Vue 接收相同的选项，例如 data、computed、watch、methods 以及生命周期钩子等。仅有的例外是像 el 这样根实例特有的选项。</p><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>组件是可复用实例,以Java编程语言类比,组件类似于自己定义的类<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCustomClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> member_variable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">memberFunction</span><span class="params">(String formal_parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> data=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><ul><li>上述的Vue.component第一个参数button-counter-&gt;类名MyCustomClass</li><li>data选项-&gt;成员变量</li><li>methods选项-&gt;成员方法</li><li>computed-&gt;(经典设计模式中<strong>观察者模式</strong>的被订阅方,被订阅者管理(侦听)的数据一旦更新或者被调用Setter方法,则给订阅者推送更新后的数据)</li><li>watch:个人理解同上,侦听某一个数据</li><li>生命周期钩子-&gt;Java对象创建过程:静态数据初始化,非静态数据初始化,构造器初始化…</li></ul><h2 id="data-必须是一个函数"><a href="#data-必须是一个函数" class="headerlink" title="data 必须是一个函数"></a>data 必须是一个函数</h2><p>一个组件的 data 选项必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，如果 Vue 没有这条规则，点击一个按钮就可能影响到其它所有实例。</p><h3 id="个人理解-1"><a href="#个人理解-1" class="headerlink" title="个人理解"></a>个人理解</h3><p>以Java编程语言类比,data选项不定义成函数则为静态变量,在<strong>JVM方法区中(JDK8之后)</strong>被多个对象共享,定义成函数则为成员变量</p><h2 id="通过-Prop-向子组件传递数据"><a href="#通过-Prop-向子组件传递数据" class="headerlink" title="通过 Prop 向子组件传递数据"></a>通过 Prop 向子组件传递数据</h2><h3 id="个人理解-2"><a href="#个人理解-2" class="headerlink" title="个人理解"></a>个人理解</h3><p>Prop:用于向子组件(Vue.component(‘childcomponent’,{})传递数据,Prop 在子组件上注册一些自定义特性。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。</p><h3 id="官方示例"><a href="#官方示例" class="headerlink" title="官方示例"></a>官方示例</h3><p>为了给博文组件传递一个标题，我们可以用一个 props 选项将其包含在该组件可接受的 prop 列表中：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'title'</span>],</span><br><span class="line">  template: <span class="string">'&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>一个组件默认可以拥有任意数量的 prop，任何值都可以传递给任何 prop。<strong>在上述模板中，你会发现我们能够在组件实例中访问这个值，就像访问 data 中的值一样。</strong><br>通过Vue实例,v-bind动态传递数据给prop<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">  v-<span class="keyword">for</span>=<span class="string">"post in posts"</span></span><br><span class="line">  v-bind:key=<span class="string">"post.id"</span></span><br><span class="line">  v-bind:title=<span class="string">"post.title"</span></span><br><span class="line">&gt;<span class="xml"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div></p><h2 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h2><h3 id="个人理解-3"><a href="#个人理解-3" class="headerlink" title="个人理解"></a>个人理解</h3><p>开发时涉及与父级组件沟通,使用类似prop关键字在框架设计上不合理,因为这种设计需要确定父组件接受数据关键字,子组件传出数据关键字,而且数据还是从模板(&lt;&gt;&lt;/&gt;)传递到Vue对象,违背视图数据分离原则。故采用事件监听机制。</p><h3 id="官方示例-1"><a href="#官方示例-1" class="headerlink" title="官方示例"></a>官方示例</h3><p>在我们开发 <blog-post> 组件时，它的一些功能可能要求我们和父级组件进行沟通。例如我们可能会引入一个可访问性的功能来放大博文的字号，同时让页面的其它部分保持默认的字号。</blog-post></p><p>在其父组件中，我们可以通过添加一个 postFontSize 数据属性来支持这个功能：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#blog-posts-events-demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    posts: [<span class="comment">/* ... */</span>],</span><br><span class="line">    postFontSize: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>它可以在模板中用来控制所有博文的字号，Vue 实例提供了一个自定义事件的系统来解决这个问题。父级组件可以像处理 native DOM 事件一样通过 v-on 监听子组件实例的任意事件。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"blog-posts-events-demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: postFontSize + 'em' &#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:post</span>=<span class="string">"post"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += 0.1"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>现在我们在每篇博文正文之前添加一个按钮来放大字号,子组件可以通过调用内建的 $emit 方法 并传入事件名称来触发一个事件。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'post'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="blog-post"&gt;</span></span><br><span class="line"><span class="string">      &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;button v-on:click="$emit('enlarge-text')"&gt;</span></span><br><span class="line"><span class="string">          Enlarge text</span></span><br><span class="line"><span class="string">        &lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;div v-html="post.content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>当点击这个按钮时，我们告诉父级组件放大所有博文的文本。</p><h4 id="使用事件抛出一个值"><a href="#使用事件抛出一个值" class="headerlink" title="使用事件抛出一个值"></a>使用事件抛出一个值</h4><p>有的时候用一个事件来抛出一个特定的值是非常有用的。例如我们可能想让 <blog-post> 组件决定它的文本要放大多少。这时可以使用 $emit 的第二个参数来提供这个值：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"$emit('enlarge-text', 0.1)"</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div></blog-post></p><p>然后当在父级组件监听这个事件的时候，我们可以通过 $event 访问到被抛出的这个值：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">"postFontSize += $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>或者，如果这个事件处理函数是一个方法：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">"onEnlargeText"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">\\ 监听到被抛出的值将会作为参数传入方法：</span><br><span class="line">methods: &#123;</span><br><span class="line">  onEnlargeText: <span class="function"><span class="keyword">function</span> (<span class="params">enlargeAmount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.postFontSize += enlargeAmount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="在组件上使用-v-model"><a href="#在组件上使用-v-model" class="headerlink" title="在组件上使用 v-model"></a>在组件上使用 v-model</h4><p>自定义事件也可以用于创建支持 v-model 的自定义输入组件。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>等价于：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event.target.value"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>当用在组件上时，v-model 则会这样：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">"searchText"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">"searchText = $event"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>为了让它正常工作，这个组件内的 <input> 必须：</p><ul><li>将其 value 特性绑定到一个名叫 value 的 prop 上</li><li>在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出<br>写成代码之后是这样的：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'custom-input'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      v-bind:value="value"</span></span><br><span class="line"><span class="string">      v-on:input="$emit('input', $event.target.value)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></li></ul><p>现在 v-model 就应该可以在这个组件上完美地工作起来了：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">custom-input</span> <span class="attr">v-model</span>=<span class="string">"searchText"</span>&gt;</span><span class="tag">&lt;/<span class="name">custom-input</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h1 id="深入了解组件"><a href="#深入了解组件" class="headerlink" title="深入了解组件"></a>深入了解组件</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><h3 id="组件名"><a href="#组件名" class="headerlink" title="组件名"></a>组件名</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br></pre></td></tr></table></figure></div><p>该组件名就是 Vue.component 的第一个参数。<br>命名规范：字母全小写且必须包含一个连字符</p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component-name'</span>, &#123;</span><br><span class="line">  <span class="comment">// ... 选项 ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 这些组件是全局注册的。也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (new Vue) 的模板中。比如：</span></span><br><span class="line">Vue.component(<span class="string">'component-a'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-b'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-c'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#app'</span> &#125;)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-a</span>&gt;</span><span class="tag">&lt;/<span class="name">component-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-b</span>&gt;</span><span class="tag">&lt;/<span class="name">component-b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component-c</span>&gt;</span><span class="tag">&lt;/<span class="name">component-c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在所有子组件中也是如此，也就是说这三个组件在各自内部也都可以相互使用。</p><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>全局注册往往是不够理想的。比如，如果你使用一个像 webpack 这样的构建系统，全局注册所有的组件意味着即便你已经不再使用一个组件了，它仍然会被包含在你最终的构建结果中。这造成了用户下载的 JavaScript 的无谓的增加。</p><p>在这些情况下，你可以通过一个普通的 JavaScript 对象来定义组件：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 在 components 选项中定义你想要使用的组件：</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA,</span><br><span class="line">    <span class="string">'component-b'</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>对于 components 对象中的每个属性来说，其属性名就是自定义元素的名字，其属性值就是这个组件的选项对象。</p><p>注意<strong>局部注册的组件在其子组件中不可用</strong>。例如，如果你希望 ComponentA 在 ComponentB 中可用，则你需要这样写：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>或者如果你通过 Babel 和 webpack 使用 ES2015 模块，那么代码看起来更像：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>注意在 ES2015+ 中，在对象中放一个类似 ComponentA 的变量名其实是 ComponentA: ComponentA 的缩写，即这个变量名同时是：</p><ul><li>用在模板中的自定义元素的名称</li><li>包含了这个组件选项的变量名</li></ul><h2 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h2><h3 id="Prop-类型"><a href="#Prop-类型" class="headerlink" title="Prop 类型"></a>Prop 类型</h3><p>到这里，我们只看到了以字符串数组形式列出的 prop：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'title'</span>, <span class="string">'likes'</span>, <span class="string">'isPublished'</span>, <span class="string">'commentIds'</span>, <span class="string">'author'</span>]</span><br></pre></td></tr></table></figure></div></p><p>但是，通常你希望每个 prop 都有指定的值类型。这时，你可以以对象形式列出 prop，这些属性的名称和值分别是 prop 各自的名称和类型：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span>,</span><br><span class="line">  isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">  commentIds: <span class="built_in">Array</span>,</span><br><span class="line">  author: <span class="built_in">Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>这不仅为你的组件提供了文档，还会在它们遇到错误的类型时从浏览器的 JavaScript 控制台提示用户。你会在这个页面接下来的部分看到类型检查和其它 prop 验证。</p><h3 id="传递静态或动态-Prop"><a href="#传递静态或动态-Prop" class="headerlink" title="传递静态或动态 Prop"></a>传递静态或动态 Prop</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 传入静态值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 传入动态值 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 动态赋予一个变量的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态赋予一个复杂表达式的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:title</span>=<span class="string">"post.title + ' by ' + post.author.name"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="单向数据流（部分内容无法理解）"><a href="#单向数据流（部分内容无法理解）" class="headerlink" title="单向数据流（部分内容无法理解）"></a>单向数据流（部分内容无法理解）</h3><p>所有的 prop 都使得其父子 prop 之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。</p><p>额外的，每次父级组件发生更新时，子组件中所有的 prop 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 prop。如果你这样做了，Vue 会在浏览器的控制台中发出警告。</p><p>这里有两种常见的试图改变一个 prop 的情形：</p><ol><li><p>这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data 属性并将这个 prop 用作其初始值：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="keyword">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'size'</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><h4 id="注意！！！"><a href="#注意！！！" class="headerlink" title="注意！！！"></a>注意！！！</h4><p>注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。</p><h3 id="Prop-验证"><a href="#Prop-验证" class="headerlink" title="Prop 验证"></a>Prop 验证</h3><p>我们可以为组件的 prop 指定验证要求，例如你知道的这些类型。如果有一个需求没有被满足，则 Vue 会在浏览器控制台中警告你。这在开发一个会被别人用到的组件时尤其有帮助。</p><p>为了定制 prop 的验证方式，你可以为 props 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'success'</span>, <span class="string">'warning'</span>, <span class="string">'danger'</span>].indexOf(value) !== <span class="number">-1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h4 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h4><p>type 可以是下列原生构造函数中的一个：</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Array</li><li>Object</li><li>Date</li><li>Function</li><li>Symbol<br>额外的，type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认。例如，给定下列现成的构造函数：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">  <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你可以使用如下方式来验证 author prop 的值是否是通过 new Person 创建的。</span></span><br><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><h3 id="自定义组件的-v-model（2-2-0-新增）"><a href="#自定义组件的-v-model（2-2-0-新增）" class="headerlink" title="自定义组件的 v-model（2.2.0+ 新增）"></a>自定义组件的 v-model（2.2.0+ 新增）</h3><p>一个组件上的 v-model 默认会利用名为 value 的 prop 和名为 input 的事件，但是像单选框、复选框等类型的输入控件可能会将 value 特性用于不同的目的。model 选项可以用来避免这样的冲突：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'base-checkbox'</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">'checked'</span>,</span><br><span class="line">    event: <span class="string">'change'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type="checkbox"</span></span><br><span class="line"><span class="string">      v-bind:checked="checked"</span></span><br><span class="line"><span class="string">      v-on:change="$emit('change', $event.target.checked)"</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueCookBook</title>
      <link href="/2019/03/11/VueCookBook/"/>
      <url>/2019/03/11/VueCookBook/</url>
      
        <content type="html"><![CDATA[<h1 id="Cookbook"><a href="#Cookbook" class="headerlink" title="Cookbook"></a>Cookbook</h1><h2 id="添加实例属性"><a href="#添加实例属性" class="headerlink" title="添加实例属性"></a>添加实例属性</h2><p>不想污染全局作用域,可以通过在原型(protopyte)上定义它们使其在每个 Vue 的实例中可用。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$appName = <span class="string">'My App'</span></span><br></pre></td></tr></table></figure></div></p><h3 id="为实例属性设置作用域的重要性"><a href="#为实例属性设置作用域的重要性" class="headerlink" title="为实例属性设置作用域的重要性"></a>为实例属性设置作用域的重要性</h3><ol><li>“为什么 appName 要以 $ 开头？这很重要吗？它会怎样？”<br><strong>$</strong> 是在 Vue 所有实例中都可用的属性的一个简单约定。这样做会避免和已被定义的数据、方法、计算属性产生冲突。我们通过 $ 为实例属性设置作用域来避免实例属性被覆盖的事情发生<h3 id="真实的示例：通过-axios-替换-Vue-Resource"><a href="#真实的示例：通过-axios-替换-Vue-Resource" class="headerlink" title="真实的示例：通过 axios 替换 Vue Resource"></a>真实的示例：通过 axios 替换 Vue Resource</h3>比如你打算替换已经废弃的 Vue Resource 库。你实在是很喜欢通过 this.$http 来访问请求方法，希望换成 axios 以后还能继续这样用。<br>你需要做的事情是把 axios 引入你的项目：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/axios/0.15.2/axios.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"user in users"</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ol><p>设置 Vue.prototype.$http 为 axios 的别名：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$http = axios</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    users: []</span><br><span class="line">  &#125;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="keyword">var</span> vm = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">this</span>.$http</span><br><span class="line">      .get(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        vm.users = response.data</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h3 id="原型方法的上下文"><a href="#原型方法的上下文" class="headerlink" title="原型方法的上下文"></a>原型方法的上下文</h3><p>在 JavaScript 中一个原型的<strong>方法</strong>会获得该实例的上下文。也就是说它们可以使用 this 访问数据、计算属性、方法或其它任何定义在实例上的东西。<br>让我们将其用在一个名为 $reverseText 的方法上：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$reverseText = <span class="function"><span class="keyword">function</span> (<span class="params">propertyName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>[propertyName] = <span class="keyword">this</span>[propertyName]</span><br><span class="line">    .split(<span class="string">''</span>)</span><br><span class="line">    .reverse()</span><br><span class="line">    .join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message) <span class="comment">// =&gt; "Hello"</span></span><br><span class="line">    <span class="keyword">this</span>.$reverseText(<span class="string">'message'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.message) <span class="comment">// =&gt; "olleH"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h1 id="Vue中的slot与slot-scope"><a href="#Vue中的slot与slot-scope" class="headerlink" title="Vue中的slot与slot-scope"></a>Vue中的slot与slot-scope</h1><h2 id="插槽概念"><a href="#插槽概念" class="headerlink" title="插槽概念"></a>插槽概念</h2><p>插槽，也就是slot，是组件的一块HTML模板，这块模板显示不显示、以及怎样显示由父组件来决定。 <strong>实际上，一个slot最核心的两个问题这里就点出来了，是显示不显示和怎样显示。</strong></p><h3 id="单个插槽-默认插槽-匿名插槽"><a href="#单个插槽-默认插槽-匿名插槽" class="headerlink" title="单个插槽|默认插槽|匿名插槽"></a>单个插槽|默认插槽|匿名插槽</h3><p>一个组件中只能有一个该类插槽</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mycpnt"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father-component</span>&gt;</span><span class="tag">&lt;/<span class="name">father-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    @import "test.css";</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">    template:</span><br><span class="line">        <span class="string">'&lt;div class="child"&gt; &lt;h3&gt;这里是子组件&lt;/h3&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'father-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'&lt;div class="father"&gt; &lt;h3&gt;这里是父组件&lt;/h3&gt; &lt;child&gt; &lt;div class="tmpl"&gt; &lt;span&gt;菜单1&lt;/span&gt; &lt;span&gt;菜单2&lt;/span&gt; &lt;span&gt;菜单3&lt;/span&gt; &lt;span&gt;菜单4&lt;/span&gt; &lt;span&gt;菜单5&lt;/span&gt; &lt;span&gt;菜单6&lt;/span&gt; &lt;/div&gt; &lt;/child&gt; &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>: <span class="string">'#mycpnt'</span>&#125;)</span><br></pre></td></tr></table></figure></div><p>在这个例子里，因为父组件在<child></child>里面写了html模板，子组件的匿名插槽(slot)被使用.<br>渲染结果:<br><img src="/images/Vue-1.png" alt=""></p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>匿名插槽没有name属性，所以是匿名插槽，那么，插槽加了name属性，就变成了具名插槽。具名插槽可以在一个组件中出现N次。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mycpnt"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">father-component</span>&gt;</span><span class="tag">&lt;/<span class="name">father-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    @<span class="keyword">import</span> <span class="string">"test.css"</span>;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CSS"><figure class="iseeu highlight /css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tmpl</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">    template:</span><br><span class="line">        <span class="string">'&lt;div class="child"&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;p&gt;具名插槽up&lt;/p&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;slot name="up"&gt;&lt;/slot&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;h3&gt;这里是子组件&lt;/h3&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;p&gt;具名插槽down&lt;/p&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;slot name="down"&gt;&lt;/slot&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;p&gt;匿名插槽&lt;/p&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;slot&gt;&lt;/slot&gt;\n'</span> +</span><br><span class="line">        <span class="string">'  &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">'father-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">'  &lt;div class="father"&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;h3&gt;这里是父组件&lt;/h3&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;child&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;div class="tmpl" slot="up"&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单1&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单2&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单3&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单4&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单5&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单6&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;/div&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;div class="tmpl" slot="down"&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-1&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-2&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-3&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-4&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-5&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-6&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;/div&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;div class="tmpl"&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;1&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;2&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;3&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;4&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;5&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'        &lt;span&gt;菜单-&gt;6&lt;/span&gt;'</span> +</span><br><span class="line">        <span class="string">'      &lt;/div&gt;'</span> +</span><br><span class="line">        <span class="string">'    &lt;/child&gt;'</span> +</span><br><span class="line">        <span class="string">'  &lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;<span class="attr">el</span>: <span class="string">'#mycpnt'</span>&#125;)</span><br></pre></td></tr></table></figure></div><p>可以看到，父组件通过html模板上的slot属性关联具名插槽。没有slot属性的html模板默认关联匿名插槽。<br>渲染结果:<br><img src="/images/Vue-2.png" alt=""></p><h3 id="作用域插槽-带数据的插槽"><a href="#作用域插槽-带数据的插槽" class="headerlink" title="作用域插槽 | 带数据的插槽"></a>作用域插槽 | 带数据的插槽</h3><p>在slot上面绑定数据</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>参考链接:<br><a href="https://segmentfault.com/a/1190000012996217/" target="_blank" rel="noopener">segmentfault 某文章</a></p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Learning</title>
      <link href="/2019/03/04/CSS-Learning/"/>
      <url>/2019/03/04/CSS-Learning/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS如何工作"><a href="#CSS如何工作" class="headerlink" title="CSS如何工作"></a>CSS如何工作</h2><p>浏览器在展现一个文档的时候，必须要把<strong>文档内容(Html)</strong>和相应的<strong>样式信息(CSS)</strong>结合起来展示。 这个处理过程一般分两个阶段：</p><ol><li>浏览器先将标记语言和CSS转换成DOM (文档对象模型)结构。 这时DOM 就代表了电脑内存中的相应文档，因为它已经融合了文档内容和相应的样式表。</li><li>最后浏览器把 DOM的内容展示出来。<br>标记语言通过使用“元素”来定义文档结构。你需要使用一些以’&lt;’开头和以’&gt;’结尾的字符串，俗称tags，来构成元素。这些元素一般是在’&lt; &gt;’里加上元素名来作为起始tag，在’&lt; &gt;’里加上’/‘和元素名的组合来构成结束tag。标记语言中规定，一些元素可以只有一个起始tag，或者构成元素的tag只有一个，但是这个tag里的名称后面必须要加个’/‘。<br>元素也可以作为容器而存在，这样可以把其他元素放到这个元素的起始tag和结束tag之间。<br>DOM是一种树形结构。 每个元素和非空文本都可以看做是树形结构上的一个结点。DOM结点不再是容器，但是，它可以作为子结点的父类结点而存在。<h2 id="层叠和继承"><a href="#层叠和继承" class="headerlink" title="层叠和继承"></a>层叠和继承</h2></li></ol><ul><li>子元素自身的样式优先级高于从父级继承来的样式</li><li>CSS 另外提供了一个!important关键字，用户可以通过使用这个关键字使自己定义的样式覆盖掉开发者定义的样式。<h2 id="选择器-Selectors"><a href="#选择器-Selectors" class="headerlink" title="选择器(Selectors)"></a>选择器(Selectors)</h2></li><li>如果多于一个规则指定了相同的属性值都应用到一个元素上，CSS规定拥有<strong>更高确定度</strong>的选择器优先级更高。ID选择器比类选择器更具确定度, 而类选择器比标签选择器（tag selector）更具确定度。</li><li>如果样式中包含冲突的规则，且它们具有<strong>相同的确定度</strong>。那么，后出现的规则优先级高。<h3 id="类选择器-Class-selectors"><a href="#类选择器-Class-selectors" class="headerlink" title="类选择器(Class selectors)"></a>类选择器(Class selectors)</h3>类选择器是以英文句号（.）开头的<h3 id="ID选择器-ID-selectors"><a href="#ID选择器-ID-selectors" class="headerlink" title="ID选择器(ID selectors)"></a>ID选择器(ID selectors)</h3>ID选择器是以#开头的<h3 id="伪类选择器-Pseudo-classes-selectors"><a href="#伪类选择器-Pseudo-classes-selectors" class="headerlink" title="伪类选择器(Pseudo-classes selectors)"></a>伪类选择器(Pseudo-classes selectors)</h3>CSS伪类（pseudo-class）是加在选择器后面的用来指定元素状态的关键字。比如，:hover 会在鼠标悬停在选中元素上时应用相应的样式。<h3 id="基于关系的选择器"><a href="#基于关系的选择器" class="headerlink" title="基于关系的选择器"></a>基于关系的选择器</h3><strong>常见的基于关系的选择器</strong><br><img src="/images/CSS-Learning-3.png" alt=""><br>你可以任意组合以表达更复杂的关系。<br>你还可以使用星号（*）来表示”任意元素“。<h2 id="属性定义有无空格区别"><a href="#属性定义有无空格区别" class="headerlink" title="属性定义有无空格区别"></a>属性定义有无空格区别</h2>.class1 .class2(有空格): 选择.class1类下的.class2类子节点<br>.class1.class2(无空格): 选择同时拥有.class1和.class2的节点<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS选择器学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.class1</span> &#123;<span class="attribute">color</span>: red;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.class1</span><span class="selector-class">.class2</span> &#123;<span class="attribute">color</span>: green;&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.class1</span> <span class="selector-class">.class2</span> &#123;<span class="attribute">color</span>: blue;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>有空格表示层级关系,无空格表示选择同时拥有<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">P</span>&gt;</span>优先级: .class1 .class2的优先级比.class1.class2高,.class1 .class2写在.class1.class2后，.class1.class2会被覆盖<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1"</span>&gt;</span></span><br><span class="line">.class1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1 class2"</span>&gt;</span>.class1.class2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class2"</span>&gt;</span>.class2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"class1 class2"</span>&gt;</span>.class1.class2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><p><img src="/images/CSS-Learning.png" alt=""><br>当对一个文档进行布局（lay out）的时候，浏览器的渲染引擎会根据标准之一的 <strong>CSS 基础框盒模型（CSS basic box model）</strong>，将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。</p><p>每个盒子由四个部分（或称区域）组成，其效用由它们各自的边界（Edge）所定义（原文：defined by their respective edges，可能意指容纳、包含、限制等）。如图，与盒子的四个组成区域相对应，每个盒子有四个边界：内容边界 Conent edge、内边距边界 Padding Edge、边框边界 Border Edge、外边框边界 Margin Edge。<br><img src="/images/CSS-Learning-2.png" alt=""></p><p>参考链接:<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Getting_started/" target="_blank" rel="noopener">MDN web docs CSS 入门教程</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model/" target="_blank" rel="noopener">MDN web docs CSS 盒模型</a></p>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cascading Style Sheets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>machine learning</title>
      <link href="/2019/03/02/machine-learning/"/>
      <url>/2019/03/02/machine-learning/</url>
      
        <content type="html"><![CDATA[<h1 id="《机器学习》-周志华著-读书笔记"><a href="#《机器学习》-周志华著-读书笔记" class="headerlink" title="《机器学习》(周志华著)读书笔记"></a>《机器学习》(周志华著)读书笔记</h1><h2 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>计算机能积累许多经验,通过对经验的利用,对新情况做出有效的决策.机器学习正是实现上述描述的一门学科,致力于研究如何通过计算的手段,利用经验来改善系统自身的性能.在计算机系统中,”经验”通常以”数据”形式存在,因此,机器学习所研究的主要内容,是关于在计算机上从数据中产生”模型”的算法,即”学习算法(learning algorithm)”.</p>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js Learning</title>
      <link href="/2019/02/19/Vue/"/>
      <url>/2019/02/19/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统<br>v-bind 特性被称为指令。指令带有前缀 v-，以表示它们是 Vue 提供的特殊特性。可能你已经猜到了，它们会在渲染的 DOM 上应用特殊的响应式行为。</p><h2 id="处理用户输入"><a href="#处理用户输入" class="headerlink" title="处理用户输入"></a>处理用户输入</h2><p>v-on 指令添加一个事件监听器，通过它调用在 Vue 实例中定义的方法<br>v-model 指令，它能轻松实现表单输入和应用状态之间的双向绑定</p><h2 id="组件化构建"><a href="#组件化构建" class="headerlink" title="组件化构建"></a>组件化构建</h2><p>prop：从父作用域将数据传到子组件</p><h1 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h1><h2 id="数据与方法"><a href="#数据与方法" class="headerlink" title="数据与方法"></a>数据与方法</h2><p>当一个 Vue 实例被创建时，它向 Vue 的响应式系统中加入了其 data 对象中能找到的所有的属性。当这些属性的值发生改变时，视图将会产生“响应”，即匹配更新为新的值。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们的数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该对象被加入到一个 Vue 实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得这个实例上的属性</span></span><br><span class="line"><span class="comment">// 返回源数据中对应的字段</span></span><br><span class="line">vm.a == data.a <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ……反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure></div></p><p><strong>除了数据属性，Vue 实例还暴露了一些有用的实例属性与方法。它们都有前缀 $，以便与用户定义的属性区分开来。例如：</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个回调将在 `vm.a` 改变后调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h2 id="实例生命周期钩子"><a href="#实例生命周期钩子" class="headerlink" title="实例生命周期钩子"></a>实例生命周期钩子</h2><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程——例如，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做<strong>生命周期钩子</strong>的函数，这给了用户在不同阶段添加自己的代码的机会。<br>比如 created 钩子可以用来在一个实例被创建之后执行代码：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; "a is: 1"</span></span><br></pre></td></tr></table></figure></div></p><p>也有一些其它的钩子，在实例生命周期的不同阶段被调用，如 <strong>mounted</strong>、<strong>updated</strong> 和 <strong>destroyed</strong>。生命周期钩子的 this 上下文指向调用它的 Vue 实例。</p><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><p>数据绑定最常见的形式就是使用“Mustache”语法 (双大括号) 的文本插值：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>Mustache 标签将会被替代为对应数据对象上 msg 属性的值。<strong>无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。</strong><br>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上的其它数据绑定：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h3><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用 v-html 指令：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="使用JavaScript表达式"><a href="#使用JavaScript表达式" class="headerlink" title="使用JavaScript表达式"></a>使用JavaScript表达式</h3><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定，Vue.js 都提供了完全的 JavaScript 表达式支持。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令特性的值预期是<strong>单个 JavaScript 表达式</strong> (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。回顾我们在介绍中看到的例子：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，v-bind 指令可以用于响应式地更新 HTML 特性：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>另一个例子是 v-on 指令，它用于监听 DOM 事件：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="动态参数-2-60新增"><a href="#动态参数-2-60新增" class="headerlink" title="动态参数(2.60新增)"></a>动态参数(2.60新增)</h3><p>从 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">"url"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>这里的 attributeName 会被作为一个 JavaScript 表达式进行动态求值，求得的值将会作为最终的参数来使用。例如，如果你的 Vue 实例有一个 data 属性 attributeName，其值为 “href”，那么这个绑定将等价于 v-bind:href。</p><p>同样地，你可以使用动态参数为一个动态的事件名绑定处理函数：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">"doSomething"</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>修饰符 (modifier) 是以半角句号 . 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>v-前缀作为一种视觉提示，用来识别模板中 Vue 特定的特性。当你在使用 Vue.js 为现有标签添加动态行为 (dynamic behavior) 时，v-前缀很有帮助，然而，对于一些频繁用到的指令来说，就会感到使用繁琐。同时，在构建由 Vue 管理所有模板的单页面应用程序 (SPA - single page application) 时，v-前缀也变得没那么重要了。因此，Vue 为 v-bind 和 v-on 这两个最常用的指令，提供了特定简写：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h1 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h1><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>对于任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>这里我们声明了一个计算属性 reversedMessage。我们提供的函数将用作属性 vm.reversedMessage 的 getter 函数：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; 'olleH'</span></span><br><span class="line">vm.message = <span class="string">'Goodbye'</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; 'eybdooG'</span></span><br></pre></td></tr></table></figure></div></p><p>你可以打开浏览器的控制台，自行修改例子中的 vm。vm.reversedMessage 的值始终取决于 vm.message 的值。</p><p>你可以像绑定普通属性一样在模板中绑定计算属性。Vue 知道 vm.reversedMessage 依赖于 vm.message，因此当 vm.message 发生改变时，所有依赖 vm.reversedMessage 的绑定也会更新。而且最妙的是我们已经以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的，这使它更易于测试和理解。</p><h3 id="计算属性缓存-vs-方法"><a href="#计算属性缓存-vs-方法" class="headerlink" title="计算属性缓存 vs 方法"></a>计算属性缓存 vs 方法</h3><p>可以通过在表达式中调用方法来达到同样的效果：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: "&#123;&#123; reversedMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的依赖进行缓存的</strong>。只在相关依赖发生改变时它们才会重新求值。这就意味着只要 message 还没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着下面的计算属性将不再更新，因为 Date.now() 不是响应式依赖：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Date</span>.now()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。</p><h3 id="计算属性vs侦听属性"><a href="#计算属性vs侦听属性" class="headerlink" title="计算属性vs侦听属性"></a>计算属性vs侦听属性</h3><p>Vue 提供了一种更通用的方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>。当你有一些数据需要随着其它数据变动而变动时，你很容易滥用 watch——特别是如果你之前使用过 AngularJS。然而，通常更好的做法是使用计算属性而不是命令式的 watch 回调。细想一下这个例子：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;  <span class="comment">//理解:侦听firstName数据,改变则通过键值对关系调用对应函数</span></span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>上面代码是命令式且重复的。将它与计算属性的版本进行比较：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><h3 id="计算属性的-setter"><a href="#计算属性的-setter" class="headerlink" title="计算属性的 setter"></a>计算属性的 setter</h3><p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></div></p><p>现在再运行 vm.fullName = ‘John Doe’ 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新</p><h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的侦听器。这就是为什么 Vue 通过 <strong>watch</strong> 选项提供了一个更通用的方法，来响应数据的变化。当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"watch-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"question"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">  el: <span class="string">'#watch-example'</span>,</span></span><br><span class="line"><span class="undefined">  data: &#123;</span></span><br><span class="line"><span class="javascript">    question: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">    answer: <span class="string">'I cannot give you an answer until you ask a question!'</span></span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  watch: &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 如果 `question` 发生改变，这个函数就会运行</span></span></span><br><span class="line"><span class="javascript">    question: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.answer = <span class="string">'Waiting for you to stop typing...'</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.debouncedGetAnswer()</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="javascript">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 请参考：https://lodash.com/docs#debounce</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.debouncedGetAnswer = _.debounce(<span class="keyword">this</span>.getAnswer, <span class="number">500</span>)</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods: &#123;</span></span><br><span class="line"><span class="javascript">    getAnswer: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.question.indexOf(<span class="string">'?'</span>) === <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.answer = <span class="string">'Questions usually contain a question mark. ;-)'</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.answer = <span class="string">'Thinking...'</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">      axios.get(<span class="string">'https://yesno.wtf/api'</span>)</span></span><br><span class="line"><span class="javascript">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">          vm.answer = _.capitalize(response.data.answer)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          vm.answer = <span class="string">'Error! Could not reach the API. '</span> + error</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在这个示例中，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p><h1 id="Class与Style绑定"><a href="#Class与Style绑定" class="headerlink" title="Class与Style绑定"></a>Class与Style绑定</h1><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用 v-bind 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 v-bind 用于 class 和 style 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。</p><h2 id="绑定HTML-Class"><a href="#绑定HTML-Class" class="headerlink" title="绑定HTML Class"></a>绑定HTML Class</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h3><p>我们可以传给 v-bind:class 一个对象，以动态地切换 class：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>上面的语法表示 active 这个 class 存在与否将取决于数据属性 isActive 的 truthiness。</p><p>你可以在对象中传入更多属性来动态切换多个 class。此外，v-bind:class 指令也可以与普通的 class 属性共存。当有如下模板:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"static"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  hasError: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>结果渲染为<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>当 isActive 或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError 的值为 true，class 列表将变为 “static active text-danger”。</p><p>绑定的数据对象不必内联定义在模板里：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>渲染的结果和上面一样。我们也可以在这里绑定一个返回对象的计算属性。这是一个常用且强大的模式：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  isActive: <span class="literal">true</span>,</span><br><span class="line">  error: <span class="literal">null</span></span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      active: <span class="keyword">this</span>.isActive &amp;&amp; !<span class="keyword">this</span>.error,</span><br><span class="line">      <span class="string">'text-danger'</span>: <span class="keyword">this</span>.error &amp;&amp; <span class="keyword">this</span>.error.type === <span class="string">'fatal'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>我们可以把一个数组传给 v-bind:class，以应用一个 class 列表：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>渲染结果:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>如果你也想根据条件切换列表中的 class，可以用三元表达式：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>这样写将始终添加 errorClass，但是只有在 isActive 是 truthy[1] 时才添加 activeClass。</p><p>不过，当有多个条件 class 时这样写有些繁琐。所以在数组语法中也可以使用对象语法：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="用在组件上"><a href="#用在组件上" class="headerlink" title="用在组件上"></a>用在组件上</h3><p>当在一个自定义组件上使用 class 属性时，这些类将被添加到该组件的根元素上面。这个元素上已经存在的类不会被覆盖。</p><p>例如，如果你声明了这个组件：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;p class="foo bar"&gt;Hi&lt;/p&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>然后在使用它的时候添加一些 class：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">"baz boo"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>HTML 将被渲染为:<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar baz boo"</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>对于带数据绑定 class 也同样适用：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>当 isActive 为 truthy[1] 时，HTML 将被渲染成为：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"foo bar active"</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h2><h3 id="对象语法-1"><a href="#对象语法-1" class="headerlink" title="对象语法"></a>对象语法</h3><p>v-bind:style 的对象语法十分直观——看着非常像 CSS，但其实是一个 JavaScript 对象。CSS 属性名可以用驼峰式 (camelCase) 或短横线分隔 (kebab-case，记得用单引号括起来) 来命名：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeColor: <span class="string">'red'</span>,</span><br><span class="line">  fontSize: <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>直接绑定到一个样式对象通常更好，这会让模板更清晰：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'13px'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="数组语法-1"><a href="#数组语法-1" class="headerlink" title="数组语法"></a>数组语法</h3><p>v-bind:style 的数组语法可以将多个样式对象应用到同一个元素上：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="多重值-2-3-0"><a href="#多重值-2-3-0" class="headerlink" title="多重值(2.3.0+)"></a>多重值(2.3.0+)</h3><p>从 2.3.0 起你可以为 style 绑定中的属性提供一个包含多个值的数组，常用于提供多个带前缀的值，例如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; display: ['-webkit-box', '-ms-flexbox', 'flex'] &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>这样写只会渲染数组中最后一个被浏览器支持的值。在本例中，如果浏览器支持不带浏览器前缀的 flexbox，那么就只会渲染 display: flex。</p><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"awesome"</span>&gt;</span>Vue is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>Oh no 😢<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="v-else-if-2-1-0-新增"><a href="#v-else-if-2-1-0-新增" class="headerlink" title="v-else-if(2.1.0 新增)"></a>v-else-if(2.1.0 新增)</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="用-key-管理可复用的元素-重点"><a href="#用-key-管理可复用的元素-重点" class="headerlink" title="用 key 管理可复用的元素(重点!!!)"></a>用 key 管理可复用的元素(重点!!!)</h3><p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>那么在上面的代码中切换 loginType 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，<input> 不会被替换掉——仅仅是替换了它的 placeholder。<br>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。<strong>只需添加一个具有唯一值的 key 属性</strong>即可：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"loginType === 'username'"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your username"</span> <span class="attr">key</span>=<span class="string">"username-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"Enter your email address"</span> <span class="attr">key</span>=<span class="string">"email-input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。<br><strong>注意:</strong>注意，v-show 不支持 <template> 元素，也不支持 v-else。</template></p><h3 id="v-if-vs-v-show"><a href="#v-if-vs-v-show" class="headerlink" title="v-if vs v-show"></a>v-if vs v-show</h3><p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p><p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="用-v-for-把一个数组对应为一组元素"><a href="#用-v-for-把一个数组对应为一组元素" class="headerlink" title="用 v-for 把一个数组对应为一组元素"></a>用 v-for 把一个数组对应为一组元素</h2><p>我们用 v-for 指令根据一组数组的选项列表进行渲染。v-for 指令需要使用 item in items 形式的特殊语法，items 是源数据数组并且 item 是数组元素迭代的别名。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>在 v-for 块中，我们拥有对父作用域属性的完全访问权限。v-for 还支持一个可选的第二个参数为当前项的索引。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var example2 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: &apos;Parent&apos;,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: &apos;Foo&apos; &#125;,</span><br><span class="line">      &#123; message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法</p><h2 id="一个对象的-v-for"><a href="#一个对象的-v-for" class="headerlink" title="一个对象的 v-for"></a>一个对象的 v-for</h2><p>你也可以用 v-for 通过一个对象的属性来迭代。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"v-for-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#v-for-object'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      firstName: <span class="string">'John'</span>,</span><br><span class="line">      lastName: <span class="string">'Doe'</span>,</span><br><span class="line">      age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>你也可以提供第二个的参数为键名：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>第三个参数为索引：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125;: &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意!!!"></a>注意!!!</h3><p>在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 track-by=”$index” 。</p><p>这个默认的模式是高效的，但是只适用于<strong>不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出</strong>。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有的唯一 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind 来绑定动态值 (在这里使用简写)：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>建议尽可能在使用 v-for 时提供 key，除非遍历输出的 DOM 内容非常简单，或者是刻意依赖默认行为以获取性能上的提升。</p><p>因为它是 Vue 识别节点的一个通用机制，key 并不与 v-for 特别关联，key 还具有其他用途，我们将在后面的指南中看到其他用途。</p><h2 id="显示过滤-排序结果"><a href="#显示过滤-排序结果" class="headerlink" title="显示过滤/排序结果"></a>显示过滤/排序结果</h2><p>有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"n in evenNumbers"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  numbers: [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  evenNumbers: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.numbers.filter(<span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> number % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="一段取值范围的-v-for"><a href="#一段取值范围的-v-for" class="headerlink" title="一段取值范围的 v-for"></a>一段取值范围的 v-for</h2><p>v-for 也可以取整数。在这种情况下，它将重复多次模板。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123; n &#125;&#125; <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="v-for-on-a"><a href="#v-for-on-a" class="headerlink" title="v-for on a "></a>v-for on a <template></template></h2><p>类似于 v-if，你也可以利用带有 v-for 的 <template> 渲染多个元素。比如：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span> <span class="attr">role</span>=<span class="string">"presentation"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></div></template></p><h2 id="一个组件的-v-for"><a href="#一个组件的-v-for" class="headerlink" title="一个组件的 v-for"></a>一个组件的 v-for</h2><p><strong>2.2.0+ 的版本里，当在组件中使用 v-for 时，key 现在是必须的。</strong></p><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>任何数据都不会被自动传递到组件里，因为组件有自己独立的作用域。props是为了把迭代数据传递到组件里</p><h3 id="一个简单的-todo-list-的完整例子"><a href="#一个简单的-todo-list-的完整例子" class="headerlink" title="一个简单的 todo list 的完整例子"></a>一个简单的 todo list 的完整例子</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"todo-list-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"addNewTodo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"new-todo"</span>&gt;</span>Add a todo<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-model</span>=<span class="string">"newTodoText"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">"new-todo"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"E.g. Feed the cat"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span></span></span><br><span class="line"><span class="tag">      <span class="attr">is</span>=<span class="string">"todo-item"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(todo, index) in todos"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:key</span>=<span class="string">"todo.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-bind:title</span>=<span class="string">"todo.title"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-on:remove</span>=<span class="string">"todos.splice(index, 1)"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意这里的 is=”todo-item” 属性。这种做法在使用 DOM 模板时是十分必要的，因为在 ul 元素内只有 li 元素会被看作有效内容。这样做实现的效果与 todo-item 相同，但是可以避开一些潜在的浏览器解析错误。查看 DOM 模板解析说明 来了解更多信息。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span></span><br><span class="line"><span class="string">    &lt;li&gt;\</span></span><br><span class="line"><span class="string">      &#123;&#123; title &#125;&#125;\</span></span><br><span class="line"><span class="string">      &lt;button v-on:click="$emit(\'remove\')"&gt;Remove&lt;/button&gt;\</span></span><br><span class="line"><span class="string">    &lt;/li&gt;\</span></span><br><span class="line"><span class="string">  '</span>,</span><br><span class="line">  props: [<span class="string">'title'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#todo-list-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    newTodoText: <span class="string">''</span>,</span><br><span class="line">    todos: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Do the dishes'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        title: <span class="string">'Take out the trash'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        title: <span class="string">'Mow the lawn'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    nextTodoId: <span class="number">4</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addNewTodo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.todos.push(&#123;</span><br><span class="line">        id: <span class="keyword">this</span>.nextTodoId++,</span><br><span class="line">        title: <span class="keyword">this</span>.newTodoText</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p><img src="/images/Vue-3.png" alt=""></p><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><h2 id="事件处理方法"><a href="#事件处理方法" class="headerlink" title="事件处理方法"></a>事件处理方法</h2><p>然而许多事件处理逻辑会更为复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 还可以接收一个需要调用的方法名称。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'Vue.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用 JavaScript 直接调用方法</span></span><br><span class="line">example2.greet() <span class="comment">// =&gt; 'Hello Vue.js!'</span></span><br></pre></td></tr></table></figure></div><h2 id="内联处理器中的方法"><a href="#内联处理器中的方法" class="headerlink" title="内联处理器中的方法"></a>内联处理器中的方法</h2><p>除了直接绑定到一个方法，也可以在内联 JavaScript 语句中调用方法：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-3'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>有时也需要在内联语句处理器中访问原始的 DOM 事件。可以用特殊变量 $event 把它传入方法：</p><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在方法中轻松实现这点，但更好的方式是：方法只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题，Vue.js 为 v-on 提供了事件修饰符。之前提过，修饰符是由点开头的指令后缀来表示的。</p><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li><li>.once</li><li>.passive<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阻止单击事件继续传播 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即元素自身触发的事件先在此处理，然后才交由内部元素进行处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当在 event.target 是当前元素自身时触发处理函数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 即事件不是从内部元素触发的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.1.4 新增 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件将只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 2.3.0 新增 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Vue 还对应 addEventListener 中的 passive 选项提供了 .passive 修饰符。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (即滚动行为) 将会立即触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 而不会等待 `onScroll` 完成  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这其中包含 `event.preventDefault()` 的情况 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:scroll.passive</span>=<span class="string">"onScroll"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">--</span> 这个 <span class="attr">.passive</span> 修饰符尤其能够提升移动端的性能 <span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 v-on:click.prevent.self 会阻止所有的点击，而 v-on:click.self.prevent 只会阻止对元素自身的点击。</p><h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要检查详细的按键。Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 `key` 是 `Enter` 时调用 `vm.submit()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="系统修饰键"><a href="#系统修饰键" class="headerlink" title="系统修饰键"></a>系统修饰键</h2><p><strong>2.1.0 新增</strong><br>可以用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器。</p><ul><li>.ctrl</li><li>.alt</li><li>.shift</li><li>.meta</li></ul><h2 id="exact-修饰符"><a href="#exact-修饰符" class="headerlink" title=".exact 修饰符"></a>.exact 修饰符</h2><p><strong>2.5.0 新增</strong><br>.exact 修饰符允许你控制由精确的系统修饰符组合触发的事件。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.ctrl.exact</span>=<span class="string">"onCtrlClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">"onClick"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="鼠标按钮修饰符"><a href="#鼠标按钮修饰符" class="headerlink" title="鼠标按钮修饰符"></a>鼠标按钮修饰符</h2><p><strong>2.2.0 新增</strong></p><ul><li>.left</li><li>.right</li><li>.middle<br>这些修饰符会限制处理函数仅响应特定的鼠标按钮。<h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="文本-1"><a href="#文本-1" class="headerlink" title="文本"></a>文本</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"add multiple lines"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>单个复选框，绑定到布尔值：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>多个复选框，绑定到同一个数组：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'example-3'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-3'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkedNames: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-4'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    picked: <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="选择框"><a href="#选择框" class="headerlink" title="选择框"></a>选择框</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'...'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><p>多选时 (绑定到一个数组)：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-6"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span> <span class="attr">multiple</span> <span class="attr">style</span>=<span class="string">"width: 50px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-6'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h2 id="值绑定"><a href="#值绑定" class="headerlink" title="值绑定"></a>值绑定</h2><p>对于单选按钮，复选框及选择框的选项，v-model 绑定的值通常是静态字符串 (对于复选框也可以是布尔值)：</p><h3 id="单选按钮-1"><a href="#单选按钮-1" class="headerlink" title="单选按钮"></a>单选按钮</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">v-model</span>=<span class="string">"pick"</span> <span class="attr">v-bind:value</span>=<span class="string">"a"</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line">vm.pick === vm.a</span><br></pre></td></tr></table></figure></div><h3 id="选择框的选项"><a href="#选择框的选项" class="headerlink" title="选择框的选项"></a>选择框的选项</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联对象字面量 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-bind:value</span>=<span class="string">"&#123; number: 123 &#125;"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当选中时</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// =&gt; 'object'</span></span><br><span class="line">vm.selected.number <span class="comment">// =&gt; 123</span></span><br></pre></td></tr></table></figure></div><h2 id="修饰符-1"><a href="#修饰符-1" class="headerlink" title="修饰符"></a>修饰符</h2><h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a>.lazy</h3><p>在默认情况下，v-model 在每次 input 事件触发后将输入框的值与数据进行同步 (除了上述输入法组合文字时)。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在“change”时而非“input”时更新 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></div></p><h3 id="number"><a href="#number" class="headerlink" title=".number"></a>.number</h3><p>如果想自动将用户的输入值转为数值类型，可以给 v-model 添加 number 修饰符：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>这通常很有用，因为即使在 type=”number” 时，HTML 输入元素的值也总会返回字符串。如果这个值无法被 parseFloat() 解析，则会返回原始的值。</p><h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空白字符，可以给 v-model 添加 trim 修饰符：</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其八</title>
      <link href="/2019/02/11/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB8/"/>
      <url>/2019/02/11/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB8/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="动态渲染页面爬取"><a href="#动态渲染页面爬取" class="headerlink" title="动态渲染页面爬取"></a>动态渲染页面爬取</h2><p>JavaScript动态渲染的页面不止Ajax这一种。比如中国青年网分页部分由JavaScript生成，并非原始HTML代码，其中不包含Ajax请求。即使是Ajax获取的数据，比如淘宝这种页面，但是其Ajax接口含有很多加密参数，很难直接找出规律，故很难直接分析Ajax来抓取。<br>为了解决上述问题，我们可以直接使用模拟浏览器运行的方式来实现，这样就可以做到在浏览器中看到什么样，抓取的源码就是什么样，也就是可见即可爬。这样我们就不用再去管页面内部的JavaScript用了什么算法渲染页面，不用管网页后台的Ajax接口到底有哪些参数。<br>Python提供了许多模拟浏览器运行的库，如Selenium，Splash，PyV8，Ghost等。</p><h3 id="Selenium的使用"><a href="#Selenium的使用" class="headerlink" title="Selenium的使用"></a>Selenium的使用</h3><p>Selenium是一个自动化测试工具，利用它可以驱动浏览器执行特定的动作，如点击，下拉等操作，同时还可以获取浏览器当前呈现的页面的源代码，做到可见即可爬。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>使用Selenium工具测试前，确保Chrome浏览器已经正确安装了ChromeDriver</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    input = browser.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)</span><br><span class="line">    input.send_keys(Keys.ENTER)</span><br><span class="line">    wait = WebDriverWait(browser, <span class="number">10</span>)</span><br><span class="line">    wait.until(EC.presence_of_element_located((By.ID, <span class="string">'content_left'</span>)))</span><br><span class="line">    print(browser.current_url)  <span class="comment"># 当前URL</span></span><br><span class="line">    print(browser.get_cookies())  <span class="comment"># 当前Cookies</span></span><br><span class="line">    print(browser.page_source)  <span class="comment"># 网页源代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># browser.close()</span></span><br></pre></td></tr></table></figure></div><p>运行代码后，会自动弹出一个Chrome浏览器。浏览器首先会跳转到百度，然后在搜索框中输入Python，接着跳转到搜索结果页。<br><img src="/images/网络爬虫22.png" alt=""></p><h4 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h4><p>Selenium支持非常多的浏览器，如Chrome，Firefox，Edge等，还有Android，BlackBerry等手机端的浏览器。另外，也支持无界面浏览器PhantomJS。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure></div></p><h4 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)  <span class="comment"># get()请求网页，参数传入链接URL</span></span><br><span class="line">print(browser.page_source)  <span class="comment"># 打印出网页源代码</span></span><br></pre></td></tr></table></figure></div><h4 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h4><p>Selenium可以驱动浏览器完成各种操作，比如填充表单，模拟点击等。比如，我们想要完成向某个输入框输入文字的操作，需要知道输入框的位置。Selenium提供了一系列查找节点的方法。</p><h5 id="单节点"><a href="#单节点" class="headerlink" title="单节点"></a>单节点</h5><p>淘宝页面提取搜索框这个节点，首先观察源代码<br><img src="/images/网络爬虫23.png" alt=""><br>id为q,name也为q等，此时可以用多种方式获取。比如find_element_by_name()根据name获取,find_element_by_id()根据id获取。<strong>另外，还有根据XPath，CSS选择器等获取的方式</strong>（分析思路不宜局限！！！）<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)  <span class="comment"># get()请求网页，参数传入链接URL</span></span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)</span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)</span><br><span class="line">print(input_first, input_second, input_third)</span><br><span class="line"><span class="comment"># 输出均为：&lt;selenium.webdriver.remote.webelement.WebElement</span></span><br><span class="line"><span class="comment"># (session="dcf39b96033a850b46dfedd95477de96", element="0.5785275204221065-1")&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>Selenium提供了通用方法find_element(),需要传入两参数，查找方式By和值。例如：find_element_by_id(id)等价于find_element(By.ID, id)</p><h5 id="多节点"><a href="#多节点" class="headerlink" title="多节点"></a>多节点</h5><p>使用find_elements()方法<br>要查找淘宝左侧导航条的所有条目<br><img src="/images/网络爬虫24.png" alt=""><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)  <span class="comment"># get()请求网页，参数传入链接URL</span></span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)  <span class="comment"># 注意是find_elements系列方法</span></span><br><span class="line"><span class="comment"># 同lis = browser.find_elements(By.CSS_SELECTOR, '.service-bd li')</span></span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></div></p><h4 id="节点交互"><a href="#节点交互" class="headerlink" title="节点交互"></a>节点交互</h4><p>Selenium可以驱动浏览器执行操作，即让浏览器模拟执行一些操作。比如输入文字用send_keys(),清空文字用clear(),点击按钮用click()方法。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)  <span class="comment"># get()请求网页，参数传入链接URL</span></span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)</span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">input.clear()</span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)</span><br><span class="line">button = browser.find_element_by_class_name(<span class="string">'btn-search'</span>)</span><br><span class="line">button.click()</span><br></pre></td></tr></table></figure></div></p><h4 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h4><p>某些操作，没有特定的执行对象，比如鼠标拖拽，键盘按键等，这些动作用另一种方式来执行，即动作链。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()  <span class="comment"># 浏览器对象初始化</span></span><br><span class="line">browser.get(<span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-api-droppable'</span>)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)</span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)  <span class="comment"># 源节点</span></span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)  <span class="comment"># 目的节点</span></span><br><span class="line">actions = ActionChains(browser)</span><br><span class="line">actions.drag_and_drop(source, target)</span><br><span class="line">actions.perform()</span><br></pre></td></tr></table></figure></div></p><h4 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h4><p>对于某些操作，Selenium API并没有提供。比如，下拉进度条，它可以直接模拟运行JavaScript，此时使用execute_script()方法即可实现。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)</span><br></pre></td></tr></table></figure></div></p><h4 id="获取节点信息（暂略）"><a href="#获取节点信息（暂略）" class="headerlink" title="获取节点信息（暂略）"></a>获取节点信息（暂略）</h4><h4 id="延时等待"><a href="#延时等待" class="headerlink" title="延时等待"></a>延时等待</h4><p>在Selenium中，get()方法会在网页框架加载结束后结束执行，此时如果获取page_source,可能并不是浏览器加载完成的页面，如果某些页面有额外的Ajax请求，我们在网页源代码中也不一定能成功获取到。所以，需要延时等待一定时间，确保节点已经加载出来。<br>等待的方式有两种：隐式等待和显式等待</p><h5 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h5><p>如果Selenium没有在DOM中找到节点，继续等待，超时则抛出找不到节点的异常。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)  <span class="comment"># 隐式等待</span></span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com'</span>)</span><br><span class="line">input = browser.find_elements_by_class_name(<span class="string">'zu-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure></div></p><h5 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h5><p>指定要查找的点，然后指定一个最长等待时间。如果在规定时间内加载出这个节点，就返回查找的节点。未在规定时间找到则抛异常。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">wait = WebDriverWait(browser, <span class="number">10</span>)  <span class="comment"># 引入WebDriverWait对象，指定最长等待时间</span></span><br><span class="line">input = wait.until(EC.presence_of_element_located((By.ID, <span class="string">'q'</span>)))  <span class="comment"># 等待条件为节点加载出来</span></span><br><span class="line">button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, <span class="string">'.btn-search'</span>)))  <span class="comment"># 等待条件为节点可点击</span></span><br><span class="line">print(input, button)</span><br></pre></td></tr></table></figure></div></p><h4 id="前进和后退"><a href="#前进和后退" class="headerlink" title="前进和后退"></a>前进和后退</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">browser.back()  <span class="comment"># 回到前一个页面</span></span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()  <span class="comment"># 前进到下一个页面</span></span><br></pre></td></tr></table></figure></div><h4 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>: <span class="string">'ha'</span>, <span class="string">'domain'</span>: <span class="string">'www.zhihu.com'</span>, <span class="string">'value'</span>: <span class="string">'germey'</span>&#125;)  <span class="comment"># 添加Cookie</span></span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()  <span class="comment"># 删除所有Cookies</span></span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure></div><h4 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h4><p>在访问网页的时候，会开启一个个选项卡。在Selenium中，我们也可以对选项卡进行操作。<br><img src="/images/网络爬虫27.png" alt=""><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)  <span class="comment"># 新开启一个选项卡</span></span><br><span class="line">print(browser.switch_to.window(browser.window_handles[<span class="number">1</span>])) <span class="comment"># 跳转到第二个选项卡</span></span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://python.org'</span>)</span><br></pre></td></tr></table></figure></div></p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>selenium.common.exceptions.*</p><h3 id="使用Selenium爬取商品"><a href="#使用Selenium爬取商品" class="headerlink" title="使用Selenium爬取商品"></a>使用Selenium爬取商品</h3><p>淘宝整个页面数据是通过Ajax获取的，但是这个Ajax接口参数比较复杂，可能会包含加密密钥等，自行构造Ajax参数比较困难。对于这种页面，最方便快捷的抓取方法是通过Selenium。</p><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>利用Selenium抓取淘宝商品并用pyquery解析得到商品的图片，名称，价格，购买人数，商铺信息，商铺所在地信息，并将其保存到MongoDB。</p><h4 id="页面分析"><a href="#页面分析" class="headerlink" title="页面分析"></a>页面分析</h4><p>目标是爬取商品信息<br><img src="/images/网络爬虫25.png" alt=""><br>一个商品条目包含商品图片，名称，价格，购买人数，店铺名称和店铺所在地，我们要做的就是将这些信息爬取下来<br>抓取入口是淘宝的搜索页面，链接为<a href="https://s.taobao.com/search?q=iPad，" target="_blank" rel="noopener">https://s.taobao.com/search?q=iPad，</a><br><img src="/images/网络爬虫26.png" alt=""><br>页面下方，有一个分页导航，包含跳转链接。<br>这里商品搜索结果一般最大都为100页，要获取每一页内容，需将页码1到100顺序遍历即可，页码数是确定的。直接在页面跳转文本框中输入要跳转的页码，然后点击“确定”按钮即可跳转到页码对应的页面<br>成功加载出某一页商品列表时，利用Selenium即可获取页面源代码，然后再用相应的解析库解析即可。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其七</title>
      <link href="/2019/02/06/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB7/"/>
      <url>/2019/02/06/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB7/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="Ajax数据爬取"><a href="#Ajax数据爬取" class="headerlink" title="Ajax数据爬取"></a>Ajax数据爬取</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>浏览器的页面是经过JavaScript处理数据后生成的结果，这些数据的来源有多种，可能是通过Ajax加载（<strong>加载是一种异步加载方式，原始的页面最初不会包含某些数据，原始的页面加载完后，会再向服务器请求某个接口获取数据，然后数据才被处理从而呈现到网页上，这其实就是发送了一个Ajax请求</strong>）的，可能是包含在HTML文档中的，也可能是经过JavaScript和特定算法计算后生成的。<br>如果遇到这样的页面，直接利用requests等库来抓取原始页面是无法获取到有效数据的，这时需要分析网页后台向接口发送的Ajax请求，如果可以用requests来模拟Ajax请求，那么就可以成功抓取了。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>网页的原始HTML文档不会包含任何数据，数据都是通过Ajax统一加载后再呈现出来的，这样在Web开发上可以做到前后端分离，而且降低服务器直接渲染页面带来的压力</p><h3 id="Ajax-Asynchronous-JavaScript-and-XML-异步的JavaScript和XML-定义"><a href="#Ajax-Asynchronous-JavaScript-and-XML-异步的JavaScript和XML-定义" class="headerlink" title="Ajax(Asynchronous JavaScript and XML,异步的JavaScript和XML)定义"></a>Ajax(Asynchronous JavaScript and XML,异步的JavaScript和XML)定义</h3><p>利用JavaScript在保证页面不被刷新，页面链接不改变的情况下与服务器交换数据并更新部分网页的技术。</p><h3 id="Ajax分析方法"><a href="#Ajax分析方法" class="headerlink" title="Ajax分析方法"></a>Ajax分析方法</h3><p>以<a href="http://music.zhuolin.wang/" target="_blank" rel="noopener">VIP会员付费音乐解析下载网</a>为例，我们知道拖动刷新的内容由Ajax加载，而且页面的URL没有变化，那么应该到那里去查看这些Ajax请求呢？</p><h4 id="查看请求"><a href="#查看请求" class="headerlink" title="查看请求"></a>查看请求</h4><p>浏览器访问该站点，然后操作是F12-&gt;Network。如下图所示<br><img src="/images/网络爬虫12.png" alt=""><br>这里是在页面加载过程中浏览器与服务器之间发送请求和接收响应的所有记录。Ajax有特殊的请求类型，叫作xhr。用鼠标点击某个请求，可以查看这个请求的详细信息。<br>在Headers选项卡里，其中Request Headers中有一个信息为X-Requested-With:XMLHttpRequest,这就标记了此请求是Ajax请求。Response Headers里Content-Type:的信息为application/json，说明响应格式为JSON格式<br><img src="/images/网络爬虫14.png" alt=""><br>在Preview选项卡里，可看到响应的具体内容，JSON格式。Chrome为我们自动做了解析，点击箭头即可展开和收起相应内容。<br>这个XHR文件返回结果是播放列表选项卡里的云音乐热歌榜里的歌曲信息，这也是用来渲染网页所使用的数据。JavaScript接收到这些数据之后，再执行相应的渲染方法整个页面就渲染出来了。<br><img src="/images/网络爬虫13.png" alt=""><br><strong>我们看到的网页的真实数据并不是最原始的页面返回的，而是后来执行JavaScript后再次向后台发送了Ajax请求，浏览器拿到数据后再进一步渲染出来的。</strong></p><h3 id="Ajax结果提取"><a href="#Ajax结果提取" class="headerlink" title="Ajax结果提取"></a>Ajax结果提取</h3><h4 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h4><p>选择一个HDR请求，分析它的参数信息。<br><img src="/images/网络爬虫15.png" alt=""><br>这是一个POST请求。请求参数有一个callback，表单提交参数有types，id</p><h4 id="分析响应"><a href="#分析响应" class="headerlink" title="分析响应"></a>分析响应</h4><p>观察这个请求的响应内容<br><img src="/images/网络爬虫17.png" alt=""><br>最关键的信息在playlist的tracks里，包含请求相关歌曲资源的相应参数</p><h4 id="模拟请求"><a href="#模拟请求" class="headerlink" title="模拟请求"></a>模拟请求</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'http://music.zhuolin.wang/api.php?'</span>  <span class="comment"># Ajax请求的URL前半部分</span></span><br><span class="line">client = MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)  <span class="comment"># 创建MongoDB的连接对象</span></span><br><span class="line">db = client.music_storage  <span class="comment"># 同db = client['music_storage'],指定要使用的数据库</span></span><br><span class="line">collection = db.music  <span class="comment"># 同collection = db['music'],指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'music.zhuolin.wang'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://music.zhuolin.wang'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">&#125;  <span class="comment"># 请求头伪装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(number)</span>:</span>  <span class="comment"># 构造URL,请求JSON</span></span><br><span class="line">    offset = number+<span class="number">600</span></span><br><span class="line">    id_list = [<span class="number">3778678</span>, <span class="number">3779629</span>, <span class="number">4395559</span>, <span class="number">64016</span>, <span class="number">112504</span>, <span class="number">19723756</span>, <span class="number">2884035</span>, <span class="number">440103454</span>]</span><br><span class="line">    callback_value = <span class="string">'jQuery1113037536626572135345_1549597224'</span>+str(offset)</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'callback'</span>: callback_value,</span><br><span class="line">        <span class="string">'types'</span>: <span class="string">'playlist'</span>,</span><br><span class="line">        <span class="string">'id'</span>: id_list[number]</span><br><span class="line">    &#125;</span><br><span class="line">    url = base_url+urlencode(params)  <span class="comment"># 完整URL</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url=url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            data = json.loads(re.match(<span class="string">'.*?\((.*)\)'</span>, response.text, re.S).group(<span class="number">1</span>))  <span class="comment"># 正则提取JSON格式</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(p_json)</span>:</span>  <span class="comment"># 解析JSON,提取数据</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        name = p_json.get(<span class="string">'playlist'</span>).get(<span class="string">'name'</span>)</span><br><span class="line">        count = p_json.get(<span class="string">'playlist'</span>).get(<span class="string">'playCount'</span>)</span><br><span class="line">        items = p_json.get(<span class="string">'playlist'</span>).get(<span class="string">'tracks'</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            music = &#123;<span class="string">'ranking_name'</span>: name, <span class="string">'name'</span>: item.get(<span class="string">'name'</span>), <span class="string">'id'</span>: item.get(<span class="string">'id'</span>),</span><br><span class="line">                     <span class="string">'author_name'</span>: item.get(<span class="string">'ar'</span>)[<span class="number">0</span>].get(<span class="string">'name'</span>),</span><br><span class="line">                     <span class="string">'unused_id'</span>: item.get(<span class="string">'ar'</span>)[<span class="number">0</span>].get(<span class="string">'id'</span>)&#125;</span><br><span class="line">            <span class="keyword">yield</span> music</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(result)</span>:</span>  <span class="comment"># 保存提取的数据到数据库</span></span><br><span class="line">    <span class="keyword">if</span> collection.insert(result):</span><br><span class="line">        print(<span class="string">'Saved to Mongo'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>):</span><br><span class="line">        get_json = get_page(page)</span><br><span class="line">        results = parse_page(get_json)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            save_to_mongo(result)</span><br></pre></td></tr></table></figure></div><p>查看MongoDB的数据<br><img src="/images/网络爬虫16.png" alt=""></p><h5 id="Mongodb中，若不存在某字段，则添加字段的语句"><a href="#Mongodb中，若不存在某字段，则添加字段的语句" class="headerlink" title="Mongodb中，若不存在某字段，则添加字段的语句"></a>Mongodb中，若不存在某字段，则添加字段的语句</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from pymongo import MongoClient</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># client = MongoClient(host='localhost', port=27017)  # 创建MongoDB的连接对象</span></span><br><span class="line"><span class="comment"># db = client.music_storage  # 同db = client['music_storage'],指定要使用的数据库</span></span><br><span class="line"><span class="comment"># collection = db.music  # 同collection = db['music'],指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line"><span class="comment"># collection.update_many(&#123;'download_url': &#123;'$exists': False&#125;&#125;,</span></span><br><span class="line"><span class="comment">#                        &#123;'$set': &#123;'download_url': 'none'&#125;&#125;)</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">client = MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)  <span class="comment"># 创建MongoDB的连接对象</span></span><br><span class="line">db = client.music_storage  <span class="comment"># 同db = client['music_storage'],指定要使用的数据库</span></span><br><span class="line">collection = db.music  <span class="comment"># 同collection = db['music'],指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line">collection.update_many(&#123;<span class="string">'query field'</span>: &#123;<span class="string">'$exists'</span>: <span class="keyword">False</span>&#125;&#125;,</span><br><span class="line">                       &#123;<span class="string">'$set'</span>: &#123;<span class="string">'query field'</span>: <span class="string">'jQuery1113037536626572135345_1549597224'</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></div><p>每行数据都增加了query field数据字段<br><img src="/images/网络爬虫18.png" alt=""></p><h5 id="提取歌曲真实下载页"><a href="#提取歌曲真实下载页" class="headerlink" title="提取歌曲真实下载页"></a>提取歌曲真实下载页</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)  <span class="comment"># 创建MongoDB的连接对象</span></span><br><span class="line">db = client.music_storage  <span class="comment"># 同db = client['music_storage'],指定要使用的数据库</span></span><br><span class="line">collection = db.music  <span class="comment"># 同collection = db['music'],指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Host'</span>: <span class="string">'music.zhuolin.wang'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'http://music.zhuolin.wang'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">&#125;  <span class="comment"># 请求头伪装</span></span><br><span class="line"></span><br><span class="line">base_url = <span class="string">'http://music.zhuolin.wang/api.php?'</span>  <span class="comment"># Ajax请求的URL前半部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_page</span><span class="params">(p_json, id)</span>:</span>  <span class="comment"># 解析JSON,提取数据</span></span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        condition = &#123;<span class="string">'id'</span>: id&#125;</span><br><span class="line">        data = collection.find_one(condition)</span><br><span class="line">        data[<span class="string">'download_url'</span>] = p_json.get(<span class="string">'url'</span>)</span><br><span class="line">        result = collection.update(condition, data)</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_music_url</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> collection.find():</span><br><span class="line">        callback_value = <span class="string">'jQuery1113037536626572135345_154959722416'</span></span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'callback'</span>: callback_value,</span><br><span class="line">            <span class="string">'types'</span>: <span class="string">'url'</span>,</span><br><span class="line">            <span class="string">'id'</span>: result[<span class="string">'id'</span>],</span><br><span class="line">            <span class="string">'source'</span>: <span class="string">'netease'</span></span><br><span class="line">        &#125;</span><br><span class="line">        url = base_url + urlencode(params)  <span class="comment"># 完整URL</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url=url, headers=headers)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                data = json.loads(re.match(<span class="string">'.*?\((.*)\)'</span>, response.text, re.S).group(<span class="number">1</span>))  <span class="comment"># 正则提取JSON格式</span></span><br><span class="line">                parse_page(data, result[<span class="string">'id'</span>])</span><br><span class="line">        <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_music_url()</span><br></pre></td></tr></table></figure></div><p><img src="/images/网络爬虫19.png" alt=""></p><h3 id="分析Ajax爬取今日头条街拍美图"><a href="#分析Ajax爬取今日头条街拍美图" class="headerlink" title="分析Ajax爬取今日头条街拍美图"></a>分析Ajax爬取今日头条街拍美图</h3><p>以今日头条为例来尝试通过分析Ajax请求来抓取网页数据。此次抓取的目标是今日头条的街拍美图，抓取完成后，将每组图片分文件夹下载到本地并保存。</p><h4 id="抓取分析"><a href="#抓取分析" class="headerlink" title="抓取分析"></a>抓取分析</h4><p>在抓取之前，首先分析抓取的逻辑。打开今日头条首页<a href="https://www.toutiao.com/" target="_blank" rel="noopener">今日头条</a><br>页面右上角有一个搜索入口，这里尝试抓取街拍美图，所以输入“街拍”二字搜索一下，然后操作是F12-&gt;Network，查看所有的网络请求。打开第一个网络请求，Name为<a href="https://www.toutiao.com/search/?keyword=街拍，" target="_blank" rel="noopener">https://www.toutiao.com/search/?keyword=街拍，</a> 打开Preview选项卡查看Response Body。如果页面中的内容是根据第一个请求得到的结果渲染出来的，那么第一个请求的源代码中必然会包含页面结果中的文字。<br><img src="/images/网络爬虫20.png" alt=""><br>因此，我们可以初步判断这些内容是由Ajax加载，然后用JavaScript渲染出来的。接下来，我们可以切换到XHR过滤选项卡，查看有没有Ajax请求。<br>由于我们的目的是要抓取其中的图，一篇文章的一组图对应data字段中的一条数据。每条数据有一个image_list字段包含每篇文章的所有图片列表。<br><img src="/images/网络爬虫21.png" alt=""></p><h4 id="模拟请求-1"><a href="#模拟请求-1" class="headerlink" title="模拟请求"></a>模拟请求</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> multiprocessing.pool <span class="keyword">import</span> Pool</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.toutiao.com/search/?keyword=%E8%A1%97%E6%8B%8D'</span>,</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>,</span><br><span class="line">&#125;  <span class="comment"># 请求头伪装</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_page</span><span class="params">(offset)</span>:</span>  <span class="comment"># 构造单个Ajax请求，返回JSON格式</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'aid'</span>: <span class="string">'24'</span>,</span><br><span class="line">        <span class="string">'offset'</span>: offset,</span><br><span class="line">        <span class="string">'format'</span>: <span class="string">'json'</span>,</span><br><span class="line">        <span class="string">'keyword'</span>: <span class="string">'街拍'</span>,</span><br><span class="line">        <span class="string">'autoload'</span>: <span class="string">'true'</span>,</span><br><span class="line">        <span class="string">'count'</span>: <span class="string">'20'</span>,</span><br><span class="line">        <span class="string">'cur_tab'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'from'</span>: <span class="string">'search_tab'</span>,</span><br><span class="line">        <span class="string">'pd'</span>: <span class="string">'synthesis'</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">'https://www.toutiao.com/api/search/content/?'</span> + urlencode(params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Error'</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image</span><span class="params">(my_json)</span>:</span>  <span class="comment"># 提取</span></span><br><span class="line">    <span class="keyword">if</span> my_json.get(<span class="string">'data'</span>):</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> my_json.get(<span class="string">'data'</span>):  <span class="comment"># 可迭代对象为字典结构的列表，元素可抽象理解为每一篇文章</span></span><br><span class="line">            title = item.get(<span class="string">'title'</span>)</span><br><span class="line">            images = item.get(<span class="string">'image_list'</span>)  <span class="comment"># images为列表，元素为字典结构</span></span><br><span class="line">            <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">                <span class="keyword">yield</span> &#123;</span><br><span class="line">                    <span class="string">'image'</span>: image.get(<span class="string">'url'</span>),</span><br><span class="line">                    <span class="string">'title'</span>: title</span><br><span class="line">                &#125;  <span class="comment"># 返回的生成器元素为字典结构，KV为图片标题和图片网址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image</span><span class="params">(item)</span>:</span>  <span class="comment"># 保存图片</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(item.get(<span class="string">'title'</span>)):  <span class="comment"># 不存在名称为title的文件夹则新建</span></span><br><span class="line">        os.mkdir(item.get(<span class="string">'title'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(item.get(<span class="string">'image'</span>))  <span class="comment"># 请求图片链接</span></span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            file_path = <span class="string">'&#123;0&#125;/&#123;1&#125;.&#123;2&#125;'</span>.format(item.get(<span class="string">'title'</span>), md5(response.content).hexdigest(), <span class="string">'jpg'</span>)</span><br><span class="line">            <span class="comment"># 图片名称为其内容的MD5值，去重</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">                <span class="keyword">with</span> open(file_path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'Already Download'</span>, file_path)</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Failed to Save Image'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    json = get_page(offset)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> get_image(json):</span><br><span class="line">        print(item)</span><br><span class="line">        save_image(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pool = Pool()  <span class="comment"># 创建进程池对象</span></span><br><span class="line">    groups = [x * <span class="number">20</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">21</span>)]</span><br><span class="line">    pool.map(main, groups)  <span class="comment"># 实现多线程下载</span></span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其六</title>
      <link href="/2019/02/01/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB6/"/>
      <url>/2019/02/01/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB6/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><h3 id="TXT文本存储"><a href="#TXT文本存储" class="headerlink" title="TXT文本存储"></a>TXT文本存储</h3><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p><strong>保存知乎上“发现”页面的“热门话题”部分</strong><br><img src="/images/网络爬虫10.png" alt=""><br><img src="/images/网络爬虫9.png" alt=""><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.zhihu.com/explore"</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                  <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url=url, headers=headers).text</span><br><span class="line">doc = pq(html)</span><br><span class="line">items = doc(<span class="string">'.explore-tab .feed-item'</span>).items()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    question = item.find(<span class="string">'h2'</span>).text()</span><br><span class="line">    author = item.find(<span class="string">'.author-link'</span>).text()</span><br><span class="line">    job = item.find(<span class="string">'.bio'</span>).text()</span><br><span class="line">    answer = pq(item.find(<span class="string">'.content'</span>).html()).text()</span><br><span class="line">    file = open(<span class="string">'explore.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    file.write(<span class="string">'\n'</span>.join([question, author, job, answer]))</span><br><span class="line">    file.write(<span class="string">'\n'</span> + <span class="string">'='</span> * <span class="number">50</span> + <span class="string">'\n'</span>)</span><br><span class="line">    file.close()</span><br></pre></td></tr></table></figure></div></p><h5 id="文件打开方式"><a href="#文件打开方式" class="headerlink" title="文件打开方式"></a>文件打开方式</h5><ul><li>r：以只读方式打开文件</li><li>rb：以二进制只读方式打开文件</li><li>r+：以读写方式打开文件</li><li>rb+：以二进制读写方式打开文件</li><li>w：以写入方式打开文件</li><li>wb：以二进制写入方式打开文件</li><li>w+：以读写方式打开文件</li><li>wb+：以二进制读写方式打开文件</li><li>a：以追加方式打开文件</li><li>ab：以二进制追加方式打开文件</li><li>a+：以读写方式打开文件</li><li>ab+以二进制追加方式打开文件</li></ul><h3 id="JSON-JavaScript-Object-Notation-文件存储"><a href="#JSON-JavaScript-Object-Notation-文件存储" class="headerlink" title="JSON(JavaScript Object Notation)文件存储"></a>JSON(JavaScript Object Notation)文件存储</h3><p>JavaScript对象标记，通过对象和数组的组合来表示数据。</p><h4 id="对象与数组"><a href="#对象与数组" class="headerlink" title="对象与数组"></a>对象与数组</h4><p>在JavaScript语言中，一切都是对象。任何支持的类型都可以通过JSON来表示。但是对象和数组是比较特殊且常用的两种类型。</p><ul><li>对象：它在JavaScript是使用花括号{}包裹起来的内容，数据结构是{key1: value1, key2: value, …}的键值对结构</li><li>数组：在JavaScript中是方括号[]包裹起来的内容，数据结构为[“Java”, “JavaScript”, “Cpp”, …]<br><strong>JSON对象形式：</strong><br>例：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">json = [&#123;</span><br><span class="line">    "name": "ha_ha",</span><br><span class="line">    "gender": "male",</span><br><span class="line">    "birthday": "1926-08-17"</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    "name": "gua_gua"</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul><h4 id="读取JSON"><a href="#读取JSON" class="headerlink" title="读取JSON"></a>读取JSON</h4><p>调用JSON库的load()方法将JSON文本字符转为JSON对象<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    "name": "ha_ha",</span></span><br><span class="line"><span class="string">    "gender": "male",</span></span><br><span class="line"><span class="string">    "birthday": "1926-08-17"</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">    "name": "gua_gua"</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line">print(type(json_str))  <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">data = json.loads(json_str)</span><br><span class="line">print(data)  <span class="comment"># [&#123;'name': 'ha_ha', 'gender': 'male', 'birthday': '1926-08-17'&#125;, &#123;'name': 'gua_gua'&#125;]</span></span><br><span class="line">print(type(data))  <span class="comment"># &lt;class 'list'&gt;</span></span><br><span class="line">print(data[<span class="number">0</span>].get(<span class="string">'name'</span>))  <span class="comment"># ha_ha</span></span><br><span class="line">print(data[<span class="number">1</span>][<span class="string">'name'</span>])  <span class="comment"># gua_gua</span></span><br></pre></td></tr></table></figure></div></p><h4 id="输出JSON"><a href="#输出JSON" class="headerlink" title="输出JSON"></a>输出JSON</h4><p>调用JSON库的dump()方法将JSON对象转化为文本字符串<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json_str = <span class="string">'''[&#123;</span></span><br><span class="line"><span class="string">    "name": "蛤蛤",</span></span><br><span class="line"><span class="string">    "gender": "男",</span></span><br><span class="line"><span class="string">    "birthday": "1926-08-17"</span></span><br><span class="line"><span class="string">&#125;, &#123;</span></span><br><span class="line"><span class="string">    "name": "gua_gua"</span></span><br><span class="line"><span class="string">&#125;]'''</span></span><br><span class="line">data = json.loads(json_str)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>)<span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(data, indent=<span class="number">2</span>, ensure_ascii=<span class="keyword">False</span>))</span><br></pre></td></tr></table></figure></div></p><h3 id="CSV-Comma-Separated-Values-文件存储"><a href="#CSV-Comma-Separated-Values-文件存储" class="headerlink" title="CSV(Comma-Separated Values)文件存储"></a>CSV(Comma-Separated Values)文件存储</h3><p>逗号分隔符（字符分隔值），其文件以纯文本形式存储表格数据</p><h4 id="写入CSV文件"><a href="#写入CSV文件" class="headerlink" title="写入CSV文件"></a>写入CSV文件</h4><p>字典数据写入<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'data.csv'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> csv_file:</span><br><span class="line">    fieldnames = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'age'</span>]</span><br><span class="line">    writer = csv.DictWriter(csv_file, delimiter=<span class="string">':'</span>, fieldnames=fieldnames)</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerow(&#123;<span class="string">'id'</span>: <span class="string">'10001'</span>, <span class="string">'name'</span>: <span class="string">'ha'</span>, <span class="string">'age'</span>: <span class="string">'93'</span>&#125;)</span><br></pre></td></tr></table></figure></div></p><h4 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data.csv'</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure></div><h2 id="关系型数据库存储"><a href="#关系型数据库存储" class="headerlink" title="关系型数据库存储"></a>关系型数据库存储</h2><p>关系型数据库是基于关系模型的数据库，而关系模型是通过二维表来保存的，所以它的存储方式就是行列组成的表，每一列是一个字段，每一行是一条记录。表可以看作某个实体的集合，而实体之间存在联系，这就需要表与表之间的关联关系来体现，如主键外键的关联关系。多个表组成一个数据库，也就是关系型数据库。</p><h3 id="MySQL的存储"><a href="#MySQL的存储" class="headerlink" title="MySQL的存储"></a>MySQL的存储</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT VERSION()'</span>)  <span class="comment"># 获得MySQL的当前版本</span></span><br><span class="line">data = cursor.fetchone()  <span class="comment"># 获得第一条数据,注意：查询语句不会直接执行查询操作</span></span><br><span class="line">print(<span class="string">'Database version:'</span>, data)  <span class="comment"># Database version: ('8.0.13',)</span></span><br><span class="line"><span class="comment"># cursor.execute("CREATE DATABASE spiders DEFAULT CHARACTER SET utf8")  # 创建数据库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sql = 'CREATE TABLE IF NOT EXISTS students (id VARCHAR(255) NOT NULL, name VARCHAR(255) NOT NULL,' \</span></span><br><span class="line"><span class="comment">#       ' age INT NOT NULL, PRIMARY KEY (id))'</span></span><br><span class="line"><span class="comment"># cursor.execute(sql)  # 创建数据表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># insert_sql = 'INSERT INTO students(id, name, age) values (%s, %s, %s)'  # 插入数据语句</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     cursor.execute(insert_sql, ('19260817', 'ha', 93))</span></span><br><span class="line"><span class="comment">#     db.commit()  # 将语句提交到数据库</span></span><br><span class="line"><span class="comment"># except:</span></span><br><span class="line"><span class="comment">#     db.rollback()  # 数据回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></div><h4 id="数据库知识回顾"><a href="#数据库知识回顾" class="headerlink" title="数据库知识回顾"></a>数据库知识回顾</h4><p>rollback()涉及到事务的问题。事务机制可以确保数据的一致性，也就是要么发生要么不发生。比如插入数据，不存在插入一半的情况，即事务的原子性。事务的ACID特性如下图所示<br><img src="/images/网络爬虫11.png" alt=""></p><h4 id="数据插入操作优化"><a href="#数据插入操作优化" class="headerlink" title="数据插入操作优化"></a>数据插入操作优化</h4><p>数据插入使用字典形式<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'19260817'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'ha'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'93'</span></span><br><span class="line">&#125;  <span class="comment"># 传入的数据</span></span><br><span class="line">table = <span class="string">'students'</span>  <span class="comment"># 表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())  <span class="comment"># 字段名</span></span><br><span class="line">print(keys)  <span class="comment"># id, name, age</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>]*len(data))  <span class="comment"># 占位符，解释：长度为1的数组['%s']用乘法扩充得到</span></span><br><span class="line">print(values)  <span class="comment"># %s, %s, %s</span></span><br><span class="line">insert_sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;)'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="comment"># format()用法：将形如&#123;数据&#125;大括号里的数据构造出来</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(insert_sql, tuple(data.values())):  <span class="comment"># 传入sql变量和元组</span></span><br><span class="line">        print(<span class="string">'successful'</span>)</span><br><span class="line">        db.commit()  <span class="comment"># 将语句提交到数据库</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br><span class="line">    db.rollback()  <span class="comment"># 数据回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></div></p><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line">update_sql = <span class="string">'UPDATE students SET name= %s WHERE id = %s'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(update_sql, (<span class="string">'Jha'</span>, <span class="string">'10002'</span>)):  <span class="comment"># 传入sql变量和元组</span></span><br><span class="line">        print(<span class="string">'successful'</span>)</span><br><span class="line">        db.commit()  <span class="comment"># 将语句提交到数据库</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br><span class="line">    db.rollback()  <span class="comment"># 数据回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></div><h5 id="针对重复数据问题的优化"><a href="#针对重复数据问题的优化" class="headerlink" title="针对重复数据问题的优化"></a>针对重复数据问题的优化</h5><p>实际数据抓取过程中，大部分情况下需要插入数据，但是我们关心的是会不会出现重复数据。（重复）数据存在，则更新数据；数据不存在，则插入数据。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'19260817'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'ha_ha'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'93'</span></span><br><span class="line">&#125;  <span class="comment"># 传入的数据</span></span><br><span class="line">table = <span class="string">'students'</span>  <span class="comment"># 表名</span></span><br><span class="line">keys = <span class="string">', '</span>.join(data.keys())  <span class="comment"># 字段名</span></span><br><span class="line">values = <span class="string">', '</span>.join([<span class="string">'%s'</span>] * len(data))  <span class="comment"># 占位符，解释：长度为1的数组['%s']用乘法扩充得到</span></span><br><span class="line">insert_sql = <span class="string">'INSERT INTO &#123;table&#125;(&#123;keys&#125;) VALUES (&#123;values&#125;) ON DUPLICATE KEY UPDATE'</span>.format(table=table, keys=keys, values=values)</span><br><span class="line"><span class="comment"># format()用法：将形如&#123;数据&#125;大括号里的字符替换</span></span><br><span class="line"></span><br><span class="line">update_sql = <span class="string">', '</span>.join([<span class="string">" &#123;key&#125; = %s"</span>.format(key=key) <span class="keyword">for</span> key <span class="keyword">in</span> data])  <span class="comment"># id = %s,  name = %s,  age = %s</span></span><br><span class="line">insert_sql += update_sql</span><br><span class="line"><span class="comment"># 'INSERT INTO students(id, name, age) VALUES (%s, %s, %s) ON DUPLICATE KEY UPDATE id = %s, name = %s, age = %s'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> cursor.execute(insert_sql, tuple(data.values())*<span class="number">2</span>):  <span class="comment"># 传入sql变量和元组</span></span><br><span class="line">        print(<span class="string">'successful'</span>)</span><br><span class="line">        db.commit()  <span class="comment"># 将语句提交到数据库</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'failed'</span>)</span><br><span class="line">    db.rollback()  <span class="comment"># 数据回滚</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></div></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line"></span><br><span class="line">table = <span class="string">'students'</span></span><br><span class="line">condition = <span class="string">'id = 10002'</span></span><br><span class="line">sql = <span class="string">'DELETE FROM &#123;table&#125; WHERE &#123;condition&#125;'</span>.format(table=table, condition=condition)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(sql)</span><br><span class="line">    db.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'error'</span>)</span><br><span class="line">    db.rollback()</span><br><span class="line"></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure></div><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host=<span class="string">'127.0.0.1'</span>, user=<span class="string">'root'</span>, password=<span class="string">'root'</span>, port=<span class="number">3306</span>, db=<span class="string">'spiders'</span>)  <span class="comment"># 声明一个MySQL连接对象db</span></span><br><span class="line">cursor = db.cursor()  <span class="comment"># 获得MySQL操作游标（利用游标来执行SQL语句）</span></span><br><span class="line"></span><br><span class="line">select_sql = <span class="string">'SELECT * FROM students WHERE age = 93'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cursor.execute(select_sql)</span><br><span class="line">    print(<span class="string">'Count'</span>, cursor.rowcount)  <span class="comment"># 获取查询结果的条数</span></span><br><span class="line">    one = cursor.fetchone()  <span class="comment"># 获取结果的第一条返回数据，数据类型为元组形式</span></span><br><span class="line">    print(<span class="string">'One:'</span>, one)</span><br><span class="line">    results = cursor.fetchall()  <span class="comment"># 得到结果的所有数据,注意：fetchone()已经取了一次！！！</span></span><br><span class="line">    print(<span class="string">'Results:'</span>, results)</span><br><span class="line">    print(<span class="string">'Results Type:'</span>, type(results))  <span class="comment"># Results Type: &lt;class 'tuple'&gt;</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">        print(row)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># while one:</span></span><br><span class="line">    <span class="comment">#     print('Row:', one)</span></span><br><span class="line">    <span class="comment">#     one = cursor.fetchone()  # 逐条取数据，目的：减少fetchall()的开销</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'Error'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="非关系型数据库存储"><a href="#非关系型数据库存储" class="headerlink" title="非关系型数据库存储"></a>非关系型数据库存储</h2><p>NoSQL(Not Only SQL), 意为不仅仅是SQL，泛指非关系型数据库。NoSQL是基于键值对的，而且不需要经过SQL层的解析，数据之间没有耦合性，性能非常高。<br><strong>分类</strong></p><ul><li>键值存储数据库：代表有Redis，Voldemort，Oracle BDB等</li><li>列存储数据库：代表有Cassandra，HBase和Riak等</li><li>文档型数据库：代表有CouchDB和MongoDB等</li><li>图形数据库：代表有Neo4J，InfoGrid和Infinite Graph等<h3 id="MongoDB-存储"><a href="#MongoDB-存储" class="headerlink" title="MongoDB 存储"></a>MongoDB 存储</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">client = pymongo.MongoClient(host=<span class="string">'localhost'</span>, port=<span class="number">27017</span>)  <span class="comment"># 创建MongoDB的连接对象</span></span><br><span class="line">db = client.test  <span class="comment"># 同db = client['test'],指定要使用的数据库</span></span><br><span class="line">collection = db.students  <span class="comment"># 同collection = db['students'],指定要操作的集合（集合类似与关系数据库中的表）</span></span><br><span class="line">student = &#123;</span><br><span class="line">    <span class="string">'id'</span>: <span class="string">'19260817'</span>,</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'ha'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'93'</span>,</span><br><span class="line">    <span class="string">'gender'</span>: <span class="string">'male'</span></span><br><span class="line">&#125;  <span class="comment"># 学生数据</span></span><br><span class="line">result = collection.insert_one(student)  <span class="comment"># 插入一条数据</span></span><br><span class="line"><span class="comment"># result1 = collection.insert_many([student1, student2])  # 插入多条数据，以列表形式传递</span></span><br><span class="line"><span class="comment"># print(result1.inserted_ids)</span></span><br><span class="line">print(result.inserted_id)  <span class="comment"># 5c5bf99453700809d43de619</span></span><br><span class="line"><span class="comment"># 在MongoDB中，每条数据其实都有一个_id属性来唯一标识。如果没有显示指明该属性，MongoDB会自动产生一个ObjectId类型的_id属性。</span></span><br><span class="line"><span class="comment"># insert()方法会在执行后返回_id值</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">'name'</span>: <span class="string">'ha'</span>&#125;)  <span class="comment"># find_one()查询得到的是单个结果，find()则返回一个生成器对象。(for循环输出单个数据)</span></span><br><span class="line">print(type(result))  <span class="comment"># &lt;class 'dict'&gt;</span></span><br><span class="line">print(result)</span><br><span class="line">count = collection.find(&#123;<span class="string">'age'</span>: <span class="string">'93'</span>&#125;).count()  <span class="comment"># 计数</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>待补充！！！</strong></p><h3 id="Redis存储"><a href="#Redis存储" class="headerlink" title="Redis存储"></a>Redis存储</h3><p>一个基于内存的高效的键值型非关系数据库，存取效率极高，支持多种存储结构。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">'localhost'</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">''</span>)  <span class="comment"># 声明一个StrictRedis对象</span></span><br><span class="line"><span class="comment"># pool = ConnectionPool(host='localhost', port=6379, db=0, password='')</span></span><br><span class="line"><span class="comment"># redis = StrictRedis(connection_pool=pool)  # 使用ConnectionPool连接</span></span><br><span class="line">redis.set(<span class="string">'name'</span>, <span class="string">'Bob'</span>)  <span class="comment"># 设置一个键值对</span></span><br><span class="line">print(redis.get(<span class="string">'name'</span>))  <span class="comment"># 返回键名为name的值</span></span><br></pre></td></tr></table></figure></div></p><p><strong>待补充！！！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其五</title>
      <link href="/2019/01/29/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB5/"/>
      <url>/2019/01/29/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB5/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="解析库的使用"><a href="#解析库的使用" class="headerlink" title="解析库的使用"></a>解析库的使用</h2><p>提取页面信息时使用正则表达式，比较烦琐。网页节点可以定义id,class,或其他属性，节点之间还有层次关系，在网页上可以通过Xpath或CSS选择器来定位一个或多个节点，然后再调用相应方法获取它的正文内容或属性。</p><h3 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h3><p>全称：XML Path Language，即XML路径语言。它是一门在XML文档中查找信息的语言。最初用来搜寻XML文档的，现在也适用于HTML文档搜索。</p><h4 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h4><p><img src="/images/网络爬虫8.png" alt=""></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">'''&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">html = etree.HTML(text)  <span class="comment"># 注意！！！text中最后一个li节点没有闭合，etree模块自动修正HTML文本</span></span><br><span class="line"><span class="comment"># 读取html文件可用parse()方法</span></span><br><span class="line"><span class="comment"># html = etree.parse('test.html', etree.HTMLParser())</span></span><br><span class="line"><span class="comment"># print(type(html))  # &lt;class 'lxml.etree._Element'&gt;</span></span><br><span class="line"><span class="comment"># result = etree.tostring(html)</span></span><br><span class="line">result1 = html.xpath(<span class="string">'//a[@href="link4.html"]/../@class'</span>)  <span class="comment"># //*代表匹配所有节点,//li代表选取li节点，//li/a代表选取所有li节点的所有直接a子节点</span></span><br><span class="line">result2 = html.xpath(<span class="string">'//a[@href="link4.html"]/parent::*/@class'</span>)  <span class="comment"># 可通过parent::来获取父节点</span></span><br><span class="line"><span class="comment"># print(type(result))  # &lt;class 'bytes'&gt;</span></span><br><span class="line">print(result1)  <span class="comment"># ['item-1']</span></span><br><span class="line">print(result2)  <span class="comment"># ['item-1']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性匹配</span></span><br><span class="line">result3 = html.xpath(<span class="string">'//li[@class="item-0"]'</span>)  <span class="comment"># 选取class为item-0的li节点</span></span><br><span class="line">print(result3)  <span class="comment"># [&lt;Element li at 0x1ce4c9dea48&gt;, &lt;Element li at 0x1ce4c9dea88&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文本获取</span></span><br><span class="line">result4 = html.xpath(<span class="string">'//li[@class="item-0"]/text()'</span>)</span><br><span class="line">print(result4)  <span class="comment"># ['\n']，分析：li节点内部无文本，输出\n原因是自动修正的li节点的尾标签换行了</span></span><br><span class="line">result5 = html.xpath(<span class="string">'//li[@class="item-0"]/a/text()'</span>)</span><br><span class="line">print(result5)  <span class="comment"># ['first item', 'fifth item']</span></span><br><span class="line">result6 = html.xpath(<span class="string">'//li[@class="item-0"]//text()'</span>)  <span class="comment"># 选取class为item-0的li节点的所有子孙节点的文本</span></span><br><span class="line">print(result6)  <span class="comment"># ['first item', 'fifth item', '\n']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性获取</span></span><br><span class="line">result7 = html.xpath(<span class="string">'//li/a/@href'</span>)  <span class="comment"># 获取所有li节点下所有a节点的href属性</span></span><br><span class="line">print(result7)  <span class="comment"># ['link1.html', 'link2.html', 'link3.html', 'link4.html', 'link5.html']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性多值匹配</span></span><br><span class="line">new_text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">new_html = etree.HTML(new_text)</span><br><span class="line">result8 = new_html.xpath(<span class="string">'//li[contains(@class, "li")]/a/@href'</span>)  <span class="comment"># 使用contains()函数</span></span><br><span class="line">print(result8)  <span class="comment"># ['link.html']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多属性匹配</span></span><br><span class="line">new_text = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;li class="li li-first" name="item"&gt;&lt;a href="link.html"&gt;first item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">new_html = etree.HTML(new_text)</span><br><span class="line">result9 = new_html.xpath(<span class="string">'//li[contains(@class, "li") and @name="item"]/a/text()'</span>)  <span class="comment"># 运算符and的使用</span></span><br><span class="line">print(result9)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按序选择</span></span><br><span class="line">result10 = html.xpath(<span class="string">'//li[1]/a/text()'</span>)</span><br><span class="line">result11 = html.xpath(<span class="string">'//li[last()]/a/text()'</span>)  <span class="comment"># 使用last()函数</span></span><br><span class="line">result12 = html.xpath(<span class="string">'//li[position()&lt;3]/a/text()'</span>)  <span class="comment"># 使用position()函数</span></span><br><span class="line">print(result10)  <span class="comment"># ['first item']</span></span><br><span class="line">print(result11)  <span class="comment"># ['fifth item']</span></span><br><span class="line">print(result12)  <span class="comment"># ['first item', 'second item']</span></span><br><span class="line"></span><br><span class="line">new_text = <span class="string">'''&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link1.html"&gt;&lt;span&gt;first item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-inactive"&gt;&lt;a href="link3.html"&gt;third item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">new_html = etree.HTML(new_text)</span><br><span class="line"><span class="comment"># 节点轴选择</span></span><br><span class="line">print(<span class="string">"\n节点轴选择"</span>)</span><br><span class="line">result13 = new_html.xpath(<span class="string">'//li[1]/ancestor::*'</span>)  <span class="comment"># ancestor轴：获取所有祖先节点</span></span><br><span class="line">result14 = new_html.xpath(<span class="string">'//li[1]/ancestor::div'</span>)</span><br><span class="line">result15 = new_html.xpath(<span class="string">'//li[1]/attribute::*'</span>)  <span class="comment"># attribute轴：获取所有属性值，同@class</span></span><br><span class="line">result16 = new_html.xpath(<span class="string">'//li[1]/child::a[@href="link1.html"]'</span>)  <span class="comment"># child轴：获取所有子节点</span></span><br><span class="line">result17 = new_html.xpath(<span class="string">'//li[1]/descendant::span/text()'</span>)  <span class="comment"># descendant轴：获取所有子孙节点</span></span><br><span class="line">result18 = new_html.xpath(<span class="string">'//li[1]/following::*[2]'</span>)  <span class="comment"># following轴：当前节点之后的所有节点（并列关系节点）</span></span><br><span class="line">result19 = new_html.xpath(<span class="string">'//li[1]/following-sibling::*'</span>)  <span class="comment"># following-sibling轴：获取当前节点之后的同级节点</span></span><br><span class="line">print(result13)  <span class="comment"># [&lt;Element html at 0x146e33c1308&gt;, &lt;Element body at 0x146e33c1288&gt;, &lt;Element div at 0x146e33c1348&gt;, &lt;Element ul at 0x146e33c1388&gt;]</span></span><br><span class="line">print(result14)  <span class="comment"># [&lt;Element div at 0x146e33c1348&gt;]</span></span><br><span class="line">print(result15)  <span class="comment"># ['item-0']</span></span><br><span class="line">print(result16)  <span class="comment"># [&lt;Element a at 0x146e33c14c8&gt;]</span></span><br><span class="line">print(result17)  <span class="comment"># ['first item']</span></span><br><span class="line">print(result18)  <span class="comment"># [&lt;Element a at 0x146e33c1588&gt;]</span></span><br><span class="line">print(result19)  <span class="comment"># [&lt;Element li at 0x146e33c1688&gt;, &lt;Element li at 0x146e33c16c8&gt;, &lt;Element li at 0x146e33c1708&gt;, &lt;Element li at 0x146e33c1748&gt;]</span></span><br></pre></td></tr></table></figure></div><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h3><p>借助网页的结构和属性等特性来解析网页</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Python的一个HTML或XML的解析库，在解析时依赖解析器。<br>Beautiful Soup支持的解析器：Python标准库， lxml HTML解析器，lxml XML解析器，html5lib</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title" name="dormouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters;and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!--Elsie--&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)  <span class="comment"># BeautifulSoup对象初始化，期间自动更正不标准的HTML字符串。第二个参数为解析器类型</span></span><br><span class="line">print(soup.prettify())  <span class="comment"># 要解析的字符串以标准的缩进格式输出</span></span><br><span class="line">print(soup.title.string)  <span class="comment"># 输出HTML中title节点的文本内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点选择器</span></span><br><span class="line">print(<span class="string">"\n节点选择器"</span>)</span><br><span class="line">print(soup.title)  <span class="comment"># title节点,输出结果：&lt;title&gt;The Dormouse's story&lt;/title&gt;</span></span><br><span class="line">print(type(soup.title))  <span class="comment"># 节点类型,输出结果：&lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line">print(soup.p)  <span class="comment"># p节点,输出结果：&lt;p class="title" name="dormouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取信息</span></span><br><span class="line">print(<span class="string">"\n提取信息"</span>)</span><br><span class="line">print(soup.a.name)  <span class="comment"># 获取节点名称,输出：a</span></span><br><span class="line">print(soup.p.attrs)  <span class="comment"># 获取属性,输出：&#123;'class': ['title'], 'name': 'dormouse'&#125;</span></span><br><span class="line">print(soup.p.attrs[<span class="string">'name'</span>])  <span class="comment"># dormouse</span></span><br><span class="line"><span class="comment"># 更简单的获取方式：直接在节点元素后面加中括号</span></span><br><span class="line">print(soup.p[<span class="string">'class'</span>])  <span class="comment"># 输出：['title'],返回结果为列表的原因是一个节点元素可能有多个class</span></span><br><span class="line">print(soup.p.string)  <span class="comment"># 获取节点文本内容,输出：The Dormouse's story</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌套选择</span></span><br><span class="line">print(<span class="string">'\n嵌套选择'</span>)</span><br><span class="line">print(soup.body.a[<span class="string">'id'</span>])  <span class="comment"># 输出：link1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联选择</span></span><br><span class="line">print(<span class="string">'\n关联选择'</span>)</span><br><span class="line">print(soup.p.contents)  <span class="comment"># 获取直接子节点,,返回结果为列表形式,输出：[&lt;b&gt;The Dormouse's story&lt;/b&gt;]</span></span><br><span class="line"><span class="comment"># children属性：返回直接子节点列表</span></span><br><span class="line">print(soup.p.children)  <span class="comment"># 输出：&lt;list_iterator object at 0x0000017E98735828&gt;,迭代器形式</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.p.children:</span><br><span class="line">    print(child)  <span class="comment"># 输出：&lt;b&gt;The Dormouse's story&lt;/b&gt;</span></span><br><span class="line"></span><br><span class="line">print(soup.p.descendants)  <span class="comment"># &lt;generator object descendants at 0x000001FA0CDDA360&gt;,迭代器形式</span></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.p.descendants:</span><br><span class="line">    print(child)  <span class="comment"># 获取所有子孙节点，输出：&lt;b&gt;The Dormouse's story&lt;/b&gt; The Dormouse's story</span></span><br><span class="line"></span><br><span class="line">print(soup.b.parent)  <span class="comment"># 获取某个节点的父节点,输出：&lt;p class="title" name="dormouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line">print(list(soup.p.parents))  <span class="comment"># 获取某个节点的祖先节点</span></span><br><span class="line"><span class="comment"># 获取兄弟节点（同级节点）</span></span><br><span class="line"><span class="comment"># next_sibling：节点下一个元素,previous_sibling：节点上一个元素</span></span><br><span class="line"><span class="comment"># next_siblings：后面的兄弟节点,previous_siblings：前面的兄弟节点</span></span><br></pre></td></tr></table></figure></div><h4 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h4><p>进行比较复杂的选择时，调用Beautiful Soup提供的查询方法。</p><h5 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h5><p>查询所有符合条件的元素<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="keyword">for</span> ul <span class="keyword">in</span> soup.find_all(name=<span class="string">'ul'</span>):</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> ul.find_all(name=<span class="string">'li'</span>):</span><br><span class="line">        print(li.attrs[<span class="string">'class'</span>])</span><br><span class="line">        print(li.text)  <span class="comment"># 同li.string</span></span><br><span class="line"></span><br><span class="line">print(soup.find_all(attrs=&#123;<span class="string">'id'</span>: <span class="string">'list-1'</span>&#125;))</span><br><span class="line"><span class="comment"># 同print(soup.find_all(id='list-1'))</span></span><br><span class="line">print(soup.find_all(class_=<span class="string">'list'</span>))  <span class="comment"># class在python里是关键字，故用class_表示</span></span><br><span class="line">print(soup.find_all(text=re.compile(<span class="string">'a'</span>)))  <span class="comment"># text参数为正则表达式对象！！！</span></span><br></pre></td></tr></table></figure></div></p><h5 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h5><p>返回单个元素（匹配的第一个元素）<br>find_parents()\find_parent():返回祖先\直接父节点<br>find_next_siblings()\find_next_sibling():返回后面所有兄弟节点\后面第一个兄弟节点<br>find_previous_siblings()\find_previous_sibling():返回前面所有兄弟节点\前面第一个兄弟节点</p><h5 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h5><p>调用select()方法，传入相应CSS选择器<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup <span class="keyword">as</span> bs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div class="panel"&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-heading"&gt;</span></span><br><span class="line"><span class="string">&lt;h4&gt;Hello&lt;/h4&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class="panel-body"&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="list" id="list-1" name="elements"&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Jay&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="list list-small" id="list-2"&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Foo&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="element"&gt;Bar&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup = bs(html, <span class="string">'lxml'</span>)</span><br><span class="line">print(soup.select(<span class="string">'.panel .panel-heading'</span>))  <span class="comment"># [&lt;div class="panel-heading"&gt;&lt;h4&gt;Hello&lt;/h4&gt;&lt;/div&gt;]</span></span><br><span class="line">print(soup.select(<span class="string">'ul li'</span>))  <span class="comment"># 嵌套选择</span></span><br><span class="line">print(soup.select(<span class="string">'#list-2 .element'</span>))  <span class="comment"># [&lt;li class="element"&gt;Foo&lt;/li&gt;, &lt;li class="element"&gt;Bar&lt;/li&gt;]</span></span><br><span class="line">print(type(soup.select(<span class="string">'ul'</span>)[<span class="number">0</span>]))  <span class="comment"># &lt;class 'bs4.element.Tag'&gt;</span></span><br><span class="line">print(soup.select(<span class="string">'ul'</span>)[<span class="number">0</span>][<span class="string">'id'</span>])  <span class="comment"># 获取属性,同print(soup.select('ul')[0].attrs['id'])</span></span><br><span class="line">print(soup.select(<span class="string">'li'</span>)[<span class="number">0</span>].get_text())  <span class="comment"># 获取文本,同print(soup.select('li')[0].string)</span></span><br></pre></td></tr></table></figure></div></p><h3 id="pyquery"><a href="#pyquery" class="headerlink" title="pyquery"></a>pyquery</h3><p>CSS选择器功能的强化</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>方式有多种，比如直接传入字符串，传入URL，传入文件名</p><h4 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html = <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;div id="container"&gt;</span></span><br><span class="line"><span class="string">&lt;ul class="list"&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;first item&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1"&gt;&lt;a href="link2.html"&gt;second item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0 active"&gt;&lt;a href="link3.html"&gt;&lt;span class="hold"&gt;third item&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-1 active"&gt;&lt;a href="link4.html"&gt;fourth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li class="item-0"&gt;&lt;a href="link5.html"&gt;fifth item&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;'''</span></span><br><span class="line">doc = pq(html)  <span class="comment"># PyQuery对象初始化，字符串初始化</span></span><br><span class="line"><span class="comment"># doc = pq(url='example.com')  # URL初始化</span></span><br><span class="line"><span class="comment"># doc = pq(filename='demo.html')  # 文件初始化</span></span><br><span class="line">print(doc(<span class="string">'#container .list li'</span>))</span><br><span class="line">print(type(doc(<span class="string">'#container .list li'</span>)))  <span class="comment"># &lt;class 'pyquery.pyquery.PyQuery'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找节点</span></span><br><span class="line">items = doc(<span class="string">'.list'</span>)</span><br><span class="line">print(<span class="string">"子孙节点"</span>)</span><br><span class="line">print(items.find(<span class="string">'span'</span>))  <span class="comment"># 查找子孙节点</span></span><br><span class="line">print(<span class="string">"子节点"</span>)</span><br><span class="line">print(items.children(<span class="string">'.active'</span>))  <span class="comment"># 查找子节点</span></span><br><span class="line">print(<span class="string">"父节点"</span>)</span><br><span class="line">print(items.parent(<span class="string">'#container'</span>))  <span class="comment"># 查找父节点,查找祖先节点:parents()方法</span></span><br><span class="line">new_items = doc(<span class="string">'.list .item-0.active'</span>)</span><br><span class="line">print(<span class="string">"兄弟节点"</span>)</span><br><span class="line">print(new_items.siblings(<span class="string">'.active.item-1'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历</span></span><br><span class="line">print(<span class="string">"遍历"</span>)</span><br><span class="line">new_items = doc(<span class="string">'li'</span>).items()  <span class="comment"># 得到生成器</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> new_items:</span><br><span class="line">    print(li)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取信息</span></span><br><span class="line">print(<span class="string">"获取信息"</span>)</span><br><span class="line">a = doc(<span class="string">'.item-0.active a'</span>)</span><br><span class="line">print(a.attr.href)  <span class="comment"># 获取属性,同a.attr('href')</span></span><br><span class="line">print(a.text())  <span class="comment"># 获取文本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点操作</span></span><br><span class="line">li = doc(<span class="string">'.item-0.active'</span>)</span><br><span class="line"><span class="comment"># class属性</span></span><br><span class="line">print(<span class="string">"改变class属性"</span>)</span><br><span class="line">print(li.addClass(<span class="string">'ha_ha'</span>))  <span class="comment"># 增加节点class属性</span></span><br><span class="line">print(li.removeClass(<span class="string">'ha_ha'</span>))  <span class="comment"># 移除节点class属性</span></span><br><span class="line"><span class="comment"># attr(),text(),html()</span></span><br><span class="line">print(<span class="string">"改变其他属性"</span>)</span><br><span class="line">print(li.attr(<span class="string">'name'</span>, <span class="string">'ha_ha'</span>))</span><br><span class="line">print(<span class="string">"改变节点文本内容"</span>)</span><br><span class="line">print(li.text(<span class="string">'test'</span>))</span><br><span class="line">print(<span class="string">"改变html文本"</span>)</span><br><span class="line">print(li.html(<span class="string">'&lt;span&gt;test&lt;/span&gt;'</span>))</span><br><span class="line"><span class="comment"># remove()</span></span><br><span class="line">print(li.find(<span class="string">'span'</span>).remove())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 伪类构造器</span></span><br><span class="line">print(<span class="string">"伪类构造器"</span>)</span><br><span class="line">print(doc(<span class="string">'li:first-child'</span>))  <span class="comment"># 第一个节点</span></span><br><span class="line">print(doc(<span class="string">'li:nth-child(2)'</span>))  <span class="comment"># 第二个节点</span></span><br><span class="line">print(doc(<span class="string">'li:gt(2)'</span>))  <span class="comment"># 第三个li之后的节点</span></span><br><span class="line">print(doc(<span class="string">'li:nth-child(2n)'</span>))  <span class="comment"># 偶数位置的li节点</span></span><br><span class="line">print(doc(<span class="string">'li:contains(second)'</span>))  <span class="comment"># 包含second文本的节点</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其四</title>
      <link href="/2019/01/28/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB4/"/>
      <url>/2019/01/28/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB4/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="抓取豆瓣电影排名"><a href="#抓取豆瓣电影排名" class="headerlink" title="抓取豆瓣电影排名"></a>抓取豆瓣电影排名</h2><p>利用requests库和正则表达式来抓取豆瓣电影TOP100的相关内容。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_one_page</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWe bKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/55.0.2883.87 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == requests.codes.ok:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_one_page</span><span class="params">(html)</span>:</span></span><br><span class="line">    pattern = re.compile(<span class="string">'&lt;td width="100" valign="top"&gt;.*?a.*?href="(.*?)".*?title="(.*?)".*?span style="font-size:13px;"&gt;(.*?)&lt;/span&gt;.*?class="pl"&gt;(.*?)&lt;/p&gt;.*?star clearfix.*?"rating_nums"&gt;(.*?)&lt;/span&gt;.*?"pl"&gt;\((.*?)人评价\)&lt;/span&gt;'</span>, re.S)</span><br><span class="line">    items = re.findall(pattern, html)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'Link'</span>: item[<span class="number">0</span>],</span><br><span class="line">            <span class="string">'Title'</span>: item[<span class="number">1</span>],</span><br><span class="line">            <span class="string">'OtherName'</span>: item[<span class="number">2</span>],</span><br><span class="line">            <span class="string">'PublicMessage'</span>: item[<span class="number">3</span>],</span><br><span class="line">            <span class="string">'Score'</span>: item[<span class="number">4</span>],</span><br><span class="line">            <span class="string">'Evaluation_count'</span>: item[<span class="number">5</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_file</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'result.txt'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># print(type(json.dumps(content)))</span></span><br><span class="line">        f.write(json.dumps(content, ensure_ascii=<span class="keyword">False</span>)+<span class="string">'\n'</span>)  <span class="comment"># ensure_ascii=False意义：保证文本被解析时结果是中文形式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(offset)</span>:</span></span><br><span class="line">    url = <span class="string">'https://movie.douban.com/tag/Top100?type=S&amp;start='</span>+str(offset)</span><br><span class="line">    html = get_one_page(url)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> parse_one_page(html):</span><br><span class="line">        write_to_file(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        main(offset=i*<span class="number">20</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)  <span class="comment"># 延时等待，反爬虫优化......</span></span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其三</title>
      <link href="/2019/01/23/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB3/"/>
      <url>/2019/01/23/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB3/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><p>为了<strong>更方便</strong>处理网页验证和Cookies等高级操作，引入requests</p><h2 id="requests基本用法"><a href="#requests基本用法" class="headerlink" title="requests基本用法"></a>requests基本用法</h2><h3 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.taobao.com'</span></span><br><span class="line">r = requests.get(url)  <span class="comment"># GET请求</span></span><br><span class="line"><span class="comment"># r = requests.post(url)  # POST请求</span></span><br><span class="line"><span class="comment"># r = requests.put(url)  # PUT请求</span></span><br><span class="line"><span class="comment"># r = requests.delete(url)  # DELETE请求</span></span><br><span class="line">print(r.status_code)  <span class="comment"># 打印状态码</span></span><br><span class="line">print(r.text)  <span class="comment"># 响应的内容</span></span><br><span class="line">print(r.cookies)  <span class="comment"># Cookies</span></span><br></pre></td></tr></table></figure></div><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><h4 id="GET请求添加额外信息"><a href="#GET请求添加额外信息" class="headerlink" title="GET请求添加额外信息"></a>GET请求添加额外信息</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.httpbin.org/get'</span></span><br><span class="line">data =&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'haha'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">93</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url, params=data)  <span class="comment"># GET请求</span></span><br><span class="line">print(r.text)  <span class="comment"># 响应的内容</span></span><br><span class="line">print(type(r.json()))  <span class="comment"># 输出：&lt;class 'dict'&gt;</span></span><br><span class="line">print(type(r.text))  <span class="comment"># 输出：&lt;class 'str'&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意：返回类型是json格式的，想要解析返回结果得到一个字典格式，直接调用json()方法。</p><h4 id="抓取知乎-发现的网页"><a href="#抓取知乎-发现的网页" class="headerlink" title="抓取知乎.发现的网页"></a>抓取知乎.发现的网页</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWe bKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                         <span class="string">'Chrome/55.0.2883.87 Safari/537.36'</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;'</span>, re.S)</span><br><span class="line">titles = re.findall(pattern, r.text)</span><br><span class="line">print(titles)</span><br></pre></td></tr></table></figure></div><p>输出：<br>[‘\n为什么凸优化这么重要？\n’, ‘\n你家爱豆都说过什么感人的或励志的话？\n’, ‘\n怎样写一封得体的电子邮件？\n’, ‘\n为什么星际玩家会眼残？\n’, ‘\n如何评价英雄联盟历史上唯一上单 FMVP Marin（张庆欢）宣布退役？他的职业生涯有哪些传奇？\n’, ‘\n为什么黄磊的女儿黄多多这么优秀？\n’, ‘\n1/a＝1/b＋1/c＋1/d＋…＋1/n 有什么特殊内涵吗？\n’, ‘\n如何看待朱一龙在《知否知否应是绿肥红瘦》中的表现？\n’, ‘\n如何评价杨超越赖美云傅菁三人的合作歌曲《101个愿望》？\n’, ‘\n粉团体中的非人气成员是什么体验？\n’]</p><h4 id="抓取二进制数据并保存（二进制数据：图像，音频，视频文件等）"><a href="#抓取二进制数据并保存（二进制数据：图像，音频，视频文件等）" class="headerlink" title="抓取二进制数据并保存（二进制数据：图像，音频，视频文件等）"></a>抓取二进制数据并保存（二进制数据：图像，音频，视频文件等）</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://www.github.com/favicon.ico'</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'github_favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure></div><h4 id="返回码和相应查询条件（status-codes-py）"><a href="#返回码和相应查询条件（status-codes-py）" class="headerlink" title="返回码和相应查询条件（status_codes.py）"></a>返回码和相应查询条件（status_codes.py）</h4><p>例：状态码200表示，requests.codes.ok<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">_codes = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Informational.</span></span><br><span class="line">    <span class="number">100</span>: (<span class="string">'continue'</span>,),</span><br><span class="line">    <span class="number">101</span>: (<span class="string">'switching_protocols'</span>,),</span><br><span class="line">    <span class="number">102</span>: (<span class="string">'processing'</span>,),</span><br><span class="line">    <span class="number">103</span>: (<span class="string">'checkpoint'</span>,),</span><br><span class="line">    <span class="number">122</span>: (<span class="string">'uri_too_long'</span>, <span class="string">'request_uri_too_long'</span>),</span><br><span class="line">    <span class="number">200</span>: (<span class="string">'ok'</span>, <span class="string">'okay'</span>, <span class="string">'all_ok'</span>, <span class="string">'all_okay'</span>, <span class="string">'all_good'</span>, <span class="string">'\\o/'</span>, <span class="string">'✓'</span>),</span><br><span class="line">    <span class="number">201</span>: (<span class="string">'created'</span>,),</span><br><span class="line">    <span class="number">202</span>: (<span class="string">'accepted'</span>,),</span><br><span class="line">    <span class="number">203</span>: (<span class="string">'non_authoritative_info'</span>, <span class="string">'non_authoritative_information'</span>),</span><br><span class="line">    <span class="number">204</span>: (<span class="string">'no_content'</span>,),</span><br><span class="line">    <span class="number">205</span>: (<span class="string">'reset_content'</span>, <span class="string">'reset'</span>),</span><br><span class="line">    <span class="number">206</span>: (<span class="string">'partial_content'</span>, <span class="string">'partial'</span>),</span><br><span class="line">    <span class="number">207</span>: (<span class="string">'multi_status'</span>, <span class="string">'multiple_status'</span>, <span class="string">'multi_stati'</span>, <span class="string">'multiple_stati'</span>),</span><br><span class="line">    <span class="number">208</span>: (<span class="string">'already_reported'</span>,),</span><br><span class="line">    <span class="number">226</span>: (<span class="string">'im_used'</span>,),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Redirection.</span></span><br><span class="line">    <span class="number">300</span>: (<span class="string">'multiple_choices'</span>,),</span><br><span class="line">    <span class="number">301</span>: (<span class="string">'moved_permanently'</span>, <span class="string">'moved'</span>, <span class="string">'\\o-'</span>),</span><br><span class="line">    <span class="number">302</span>: (<span class="string">'found'</span>,),</span><br><span class="line">    <span class="number">303</span>: (<span class="string">'see_other'</span>, <span class="string">'other'</span>),</span><br><span class="line">    <span class="number">304</span>: (<span class="string">'not_modified'</span>,),</span><br><span class="line">    <span class="number">305</span>: (<span class="string">'use_proxy'</span>,),</span><br><span class="line">    <span class="number">306</span>: (<span class="string">'switch_proxy'</span>,),</span><br><span class="line">    <span class="number">307</span>: (<span class="string">'temporary_redirect'</span>, <span class="string">'temporary_moved'</span>, <span class="string">'temporary'</span>),</span><br><span class="line">    <span class="number">308</span>: (<span class="string">'permanent_redirect'</span>,</span><br><span class="line">          <span class="string">'resume_incomplete'</span>, <span class="string">'resume'</span>,),  <span class="comment"># These 2 to be removed in 3.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Client Error.</span></span><br><span class="line">    <span class="number">400</span>: (<span class="string">'bad_request'</span>, <span class="string">'bad'</span>),</span><br><span class="line">    <span class="number">401</span>: (<span class="string">'unauthorized'</span>,),</span><br><span class="line">    <span class="number">402</span>: (<span class="string">'payment_required'</span>, <span class="string">'payment'</span>),</span><br><span class="line">    <span class="number">403</span>: (<span class="string">'forbidden'</span>,),</span><br><span class="line">    <span class="number">404</span>: (<span class="string">'not_found'</span>, <span class="string">'-o-'</span>),</span><br><span class="line">    <span class="number">405</span>: (<span class="string">'method_not_allowed'</span>, <span class="string">'not_allowed'</span>),</span><br><span class="line">    <span class="number">406</span>: (<span class="string">'not_acceptable'</span>,),</span><br><span class="line">    <span class="number">407</span>: (<span class="string">'proxy_authentication_required'</span>, <span class="string">'proxy_auth'</span>, <span class="string">'proxy_authentication'</span>),</span><br><span class="line">    <span class="number">408</span>: (<span class="string">'request_timeout'</span>, <span class="string">'timeout'</span>),</span><br><span class="line">    <span class="number">409</span>: (<span class="string">'conflict'</span>,),</span><br><span class="line">    <span class="number">410</span>: (<span class="string">'gone'</span>,),</span><br><span class="line">    <span class="number">411</span>: (<span class="string">'length_required'</span>,),</span><br><span class="line">    <span class="number">412</span>: (<span class="string">'precondition_failed'</span>, <span class="string">'precondition'</span>),</span><br><span class="line">    <span class="number">413</span>: (<span class="string">'request_entity_too_large'</span>,),</span><br><span class="line">    <span class="number">414</span>: (<span class="string">'request_uri_too_large'</span>,),</span><br><span class="line">    <span class="number">415</span>: (<span class="string">'unsupported_media_type'</span>, <span class="string">'unsupported_media'</span>, <span class="string">'media_type'</span>),</span><br><span class="line">    <span class="number">416</span>: (<span class="string">'requested_range_not_satisfiable'</span>, <span class="string">'requested_range'</span>, <span class="string">'range_not_satisfiable'</span>),</span><br><span class="line">    <span class="number">417</span>: (<span class="string">'expectation_failed'</span>,),</span><br><span class="line">    <span class="number">418</span>: (<span class="string">'im_a_teapot'</span>, <span class="string">'teapot'</span>, <span class="string">'i_am_a_teapot'</span>),</span><br><span class="line">    <span class="number">421</span>: (<span class="string">'misdirected_request'</span>,),</span><br><span class="line">    <span class="number">422</span>: (<span class="string">'unprocessable_entity'</span>, <span class="string">'unprocessable'</span>),</span><br><span class="line">    <span class="number">423</span>: (<span class="string">'locked'</span>,),</span><br><span class="line">    <span class="number">424</span>: (<span class="string">'failed_dependency'</span>, <span class="string">'dependency'</span>),</span><br><span class="line">    <span class="number">425</span>: (<span class="string">'unordered_collection'</span>, <span class="string">'unordered'</span>),</span><br><span class="line">    <span class="number">426</span>: (<span class="string">'upgrade_required'</span>, <span class="string">'upgrade'</span>),</span><br><span class="line">    <span class="number">428</span>: (<span class="string">'precondition_required'</span>, <span class="string">'precondition'</span>),</span><br><span class="line">    <span class="number">429</span>: (<span class="string">'too_many_requests'</span>, <span class="string">'too_many'</span>),</span><br><span class="line">    <span class="number">431</span>: (<span class="string">'header_fields_too_large'</span>, <span class="string">'fields_too_large'</span>),</span><br><span class="line">    <span class="number">444</span>: (<span class="string">'no_response'</span>, <span class="string">'none'</span>),</span><br><span class="line">    <span class="number">449</span>: (<span class="string">'retry_with'</span>, <span class="string">'retry'</span>),</span><br><span class="line">    <span class="number">450</span>: (<span class="string">'blocked_by_windows_parental_controls'</span>, <span class="string">'parental_controls'</span>),</span><br><span class="line">    <span class="number">451</span>: (<span class="string">'unavailable_for_legal_reasons'</span>, <span class="string">'legal_reasons'</span>),</span><br><span class="line">    <span class="number">499</span>: (<span class="string">'client_closed_request'</span>,),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Server Error.</span></span><br><span class="line">    <span class="number">500</span>: (<span class="string">'internal_server_error'</span>, <span class="string">'server_error'</span>, <span class="string">'/o\\'</span>, <span class="string">'✗'</span>),</span><br><span class="line">    <span class="number">501</span>: (<span class="string">'not_implemented'</span>,),</span><br><span class="line">    <span class="number">502</span>: (<span class="string">'bad_gateway'</span>,),</span><br><span class="line">    <span class="number">503</span>: (<span class="string">'service_unavailable'</span>, <span class="string">'unavailable'</span>),</span><br><span class="line">    <span class="number">504</span>: (<span class="string">'gateway_timeout'</span>,),</span><br><span class="line">    <span class="number">505</span>: (<span class="string">'http_version_not_supported'</span>, <span class="string">'http_version'</span>),</span><br><span class="line">    <span class="number">506</span>: (<span class="string">'variant_also_negotiates'</span>,),</span><br><span class="line">    <span class="number">507</span>: (<span class="string">'insufficient_storage'</span>,),</span><br><span class="line">    <span class="number">509</span>: (<span class="string">'bandwidth_limit_exceeded'</span>, <span class="string">'bandwidth'</span>),</span><br><span class="line">    <span class="number">510</span>: (<span class="string">'not_extended'</span>,),</span><br><span class="line">    <span class="number">511</span>: (<span class="string">'network_authentication_required'</span>, <span class="string">'network_auth'</span>, <span class="string">'network_authentication'</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h4 id="网页文件上传"><a href="#网页文件上传" class="headerlink" title="网页文件上传"></a>网页文件上传</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'github_favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">url = <span class="string">"http://www.httpbin.org/post"</span></span><br><span class="line">r = requests.post(url, files=files)</span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></div><h4 id="获取和设置Cookies"><a href="#获取和设置Cookies" class="headerlink" title="获取和设置Cookies"></a>获取和设置Cookies</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">r = requests.get(url=url)</span><br><span class="line">print(r.cookies)</span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items():</span><br><span class="line">    print(key+<span class="string">"="</span>+value)</span><br></pre></td></tr></table></figure></div><h4 id="实例：登录知乎"><a href="#实例：登录知乎" class="headerlink" title="实例：登录知乎"></a>实例：登录知乎</h4><p><strong>Cookie获取方法：F12打开浏览器控制台，依次选择Network-&gt;Name-&gt;<a href="http://www.zhihu.com-&gt;Request" target="_blank" rel="noopener">www.zhihu.com-&gt;Request</a> Headers(请求头)-&gt;cookie,内容复制粘贴即可</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://www.zhihu.com"</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWe bKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                         <span class="string">'Chrome/55.0.2883.87 Safari/537.36'</span>,</span><br><span class="line">           <span class="string">'Host'</span>: <span class="string">'www.zhihu.com'</span>,</span><br><span class="line">           <span class="string">'Cookie'</span>: <span class="string">'自己填'</span>&#125;</span><br><span class="line">r = requests.get(url=url, headers=headers)  <span class="comment"># 下同</span></span><br><span class="line"><span class="comment"># # headers不包含Cookie，使用cookies参数设置</span></span><br><span class="line"><span class="comment"># cookies = '自己填'</span></span><br><span class="line"><span class="comment"># jar = requests.cookies.RequestsCookieJar()</span></span><br><span class="line"><span class="comment"># for cookie in cookies.split(';'):</span></span><br><span class="line"><span class="comment">#     key, value = cookie.split('=', 1)</span></span><br><span class="line"><span class="comment">#     jar.set(key, value)</span></span><br><span class="line"><span class="comment"># r = requests.get(url=url, headers=headers, cookies=jar)</span></span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure></div></p><h4 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h4><p>思考：每次get()或post()操作相当于两个不同的会话，模拟（伪装）两个浏览器打开页面。<br>解决：维持同一个会话，使用Session对象<br>利用Session。可以做到模拟同一个会话而不担心Cookies的问题。通常用于模拟登录成功后再进行下一步的操作<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">url = <span class="string">"http://httpbin.org/cookies/set/number/2333"</span></span><br><span class="line">r = s.get(<span class="string">'http://httpbin.org/cookies'</span>)</span><br><span class="line">print(r.text)</span><br><span class="line"><span class="comment"># 输出：&#123;</span></span><br><span class="line"><span class="comment">#   "cookies": &#123;</span></span><br><span class="line"><span class="comment">#     "number": "2333"</span></span><br><span class="line"><span class="comment">#   &#125;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure></div></p><h4 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h4><p>get方法里加个参数proxies，类型为字典形式。</p><h4 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h4><p>get方法里加个属性timeout。这个时间计算是发出请求到服务器返回响应的时间。</p><h5 id="请求组成"><a href="#请求组成" class="headerlink" title="请求组成"></a>请求组成</h5><p>分两阶段，连接和读取。如果要分别指定，就传入一个元组<br>例： r= requests.get(url, timeout=(2，4))</p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><strong>功能：处理字符串（爬虫角度：从HTML里提取想要的信息）</strong></p><h3 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h3><h4 id="常用元字符汇总"><a href="#常用元字符汇总" class="headerlink" title="常用元字符汇总"></a>常用元字符汇总</h4><p><img src="/images/网络爬虫5.png" alt=""></p><h4 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h4><p>字符转义用在查找元字符本身，比如查找.或者<em>，为了不让它解释成别的意思，需要用\取消这些字符的特殊含义。应该使用.或者\</em>.<br>对于要查找\本身，需要使用\</p><h4 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h4><p><img src="/images/网络爬虫6.png" alt=""></p><h4 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h4><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：<br>常用的反义代码<br><img src="/images/网络爬虫7.png" alt=""></p><h3 id="匹配方法"><a href="#匹配方法" class="headerlink" title="匹配方法"></a>匹配方法</h3><h4 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h4><p>从字符串的开头开始匹配<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(pattern, string, flags=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Try to apply the pattern at the start of the string, returning</span></span><br><span class="line"><span class="string">    a match object, or None if no match was found."""</span></span><br><span class="line">    <span class="keyword">return</span> _compile(pattern, flags).match(string)</span><br></pre></td></tr></table></figure></div></p><h5 id="match-用法"><a href="#match-用法" class="headerlink" title="match()用法"></a>match()用法</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">result1 = re.match(<span class="string">'^Hello\s\d&#123;3&#125;\s\d&#123;4&#125;\s\w&#123;10&#125;'</span>, content)</span><br><span class="line">print(result1)  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 25), match='Hello 123 4567 World_This'&gt;</span></span><br><span class="line">print(result1.group())  <span class="comment"># Hello 123 4567 World_This</span></span><br><span class="line">print(result1.span())  <span class="comment"># (0, 25)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配目标，提取字符串中的子串</span></span><br><span class="line">result2 = re.match(<span class="string">'^Hello\s(\d+)\s\d&#123;4&#125;\sWorld'</span>, content)</span><br><span class="line">print(result2)  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 20), match='Hello 123 4567 World'&gt;</span></span><br><span class="line">print(result2.group())  <span class="comment"># Hello 123 4567 World</span></span><br><span class="line">print(result2.group(<span class="number">0</span>))  <span class="comment"># Hello 123 4567 World</span></span><br><span class="line">print(result2.group(<span class="number">1</span>))  <span class="comment"># 123</span></span><br><span class="line"><span class="comment"># 还有()时，可用group(2)，group(3)...提取</span></span><br><span class="line">print(result2.span())  <span class="comment"># (0, 20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用匹配</span></span><br><span class="line">result3 = re.match(<span class="string">'^Hello.*Demo$'</span>, content)</span><br><span class="line">print(result3)  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 41), match='Hello 123 4567 World_This is a Regex Demo'&gt;</span></span><br><span class="line">print(result3.group())  <span class="comment"># Hello 123 4567 World_This is a Regex Demo</span></span><br><span class="line">print(result3.span())  <span class="comment"># (0, 41)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪与非贪婪</span></span><br><span class="line">new_content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result4 = re.match(<span class="string">'^He.*(\d+).*Demo'</span>, new_content)</span><br><span class="line">print(result4)  <span class="comment"># &lt;_sre.SRE_Match object; span=(0, 40), match='Hello 1234567 World_This is a Regex Demo'&gt;</span></span><br><span class="line">print(result4.group(<span class="number">1</span>))  <span class="comment"># 7, 解释：.*会匹配尽可能多的字符</span></span><br><span class="line"><span class="comment"># 非贪婪</span></span><br><span class="line">result4 = re.match(<span class="string">'^He.*?(\d+).*Demo'</span>, new_content)</span><br><span class="line">print(result4.group(<span class="number">1</span>))  <span class="comment"># 1234567, 解释：.*?匹配尽可能少的字符</span></span><br><span class="line"><span class="comment"># 注意！！！：如果匹配的结果在字符串结尾,.*?有可能不匹配任何内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修饰符</span></span><br><span class="line"><span class="comment"># 正则表达式可以包含一些可选标志修饰符来控制匹配的模式</span></span><br><span class="line">new_content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">              is a Regex Demo'''</span></span><br><span class="line">result5 = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, new_content, re.S)</span><br><span class="line">print(result5.group(<span class="number">1</span>))  <span class="comment"># 1234567, re.S作用：使.匹配包括换行符在内的所有字符</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 常用匹配符</span></span><br><span class="line"><span class="comment">#     I  IGNORECASE  Perform case-insensitive matching.</span></span><br><span class="line"><span class="comment">#                    使匹配对大小写不敏感</span></span><br><span class="line"><span class="comment">#     L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.</span></span><br><span class="line"><span class="comment">#                    做本地化识别匹配</span></span><br><span class="line"><span class="comment">#     M  MULTILINE   "^" matches the beginning of lines (after a newline)</span></span><br><span class="line"><span class="comment">#                    as well as the string.</span></span><br><span class="line"><span class="comment">#                    "$" matches the end of lines (before a newline) as well</span></span><br><span class="line"><span class="comment">#                    as the end of the string.</span></span><br><span class="line"><span class="comment">#                    多行匹配</span></span><br><span class="line"><span class="comment">#     S  DOTALL      "." matches any character at all, including the newline.</span></span><br><span class="line"><span class="comment">#                    使.匹配包括换行符在内的所有字符</span></span><br><span class="line"><span class="comment">#     X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.</span></span><br><span class="line"><span class="comment">#                    忽略字符串里的空格和换行</span></span><br><span class="line"><span class="comment">#     U  UNICODE     For compatibility only. Ignored for string patterns (it</span></span><br><span class="line"><span class="comment">#                    is the default), and forbidden for bytes patterns.</span></span><br><span class="line"><span class="comment">#                    根据Unicode字符集解析字符。这个标志影响\w,\W,\b,\B</span></span><br></pre></td></tr></table></figure></div><h4 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h4><p>不从字符串头部开始匹配。匹配时扫描整个字符串，然后返回第一个成功匹配的结果。</p><h4 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h4><p>获取匹配正则表达式的所有内容。内容保存类型为列表形式，元素保存为元组类型。</p><h4 id="sub"><a href="#sub" class="headerlink" title="sub()"></a>sub()</h4><p>修改字符串<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span><span class="params">(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Return the string obtained by replacing the leftmost</span></span><br><span class="line"><span class="string">    non-overlapping occurrences of the pattern in string by the</span></span><br><span class="line"><span class="string">    replacement repl.  repl can be either a string or a callable;</span></span><br><span class="line"><span class="string">    if a string, backslash escapes in it are processed.  If it is</span></span><br><span class="line"><span class="string">    a callable, it's passed the match object and must return</span></span><br><span class="line"><span class="string">    a replacement string to be used."""</span></span><br></pre></td></tr></table></figure></div></p><p>例：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'haha93happy'</span></span><br><span class="line">new_content = re.sub(<span class="string">'\d+'</span>, <span class="string">'94'</span>, content)</span><br><span class="line">print(new_content)  <span class="comment"># haha94happy</span></span><br></pre></td></tr></table></figure></div></p><h4 id="compile"><a href="#compile" class="headerlink" title="compile()"></a>compile()</h4><p>将正则字符串编译成正则表达式对象。以便在后面的匹配中<strong>复用</strong>。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'1926-08-17 00:00'</span></span><br><span class="line">pattern = re.compile(<span class="string">'\d&#123;2&#125;:\d&#123;2&#125;'</span>)</span><br><span class="line">result = re.sub(pattern, <span class="string">''</span>, content)</span><br><span class="line">print(result)  <span class="comment"># 1926-08-17</span></span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其二</title>
      <link href="/2019/01/20/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB2/"/>
      <url>/2019/01/20/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB2/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><p>Python提供了强大的功能齐全的类库来模拟浏览器向服务器发送请求。</p><h2 id="基本库的使用"><a href="#基本库的使用" class="headerlink" title="基本库的使用"></a>基本库的使用</h2><p>最基础的HTTP库有urllib，httplib2，requests，treq等</p><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p>Python内置的HTTP请求库</p><h4 id="模块组成"><a href="#模块组成" class="headerlink" title="模块组成"></a>模块组成</h4><ul><li>request：最基本的HTTP请求模块，可以用来模拟发送请求</li><li>error：异常处理模块，如果出现请求错误，捕获异常，进行重试/其他操作保证程序不会终止</li><li>parse：工具模块，提供了许多URL处理方法，比如拆分，解析，合并等</li><li>robotparser：识别网站robots.txt文件，判断网站是否可采集<h4 id="发送请求（request模块）"><a href="#发送请求（request模块）" class="headerlink" title="发送请求（request模块）"></a>发送请求（request模块）</h4><h5 id="urlopen-Request"><a href="#urlopen-Request" class="headerlink" title="urlopen(),Request()"></a>urlopen(),Request()</h5></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlopen</span><span class="params">(url, data=None, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,</span></span></span><br><span class="line"><span class="function"><span class="params">            *, cafile=None, capath=None, cadefault=False, context=None)</span>:</span></span><br><span class="line">    <span class="comment"># urlopen函数API分析:</span></span><br><span class="line">    <span class="comment"># url传递URL</span></span><br><span class="line">    <span class="comment"># data（附加数据）传递字节（bytes）类型的内容。注意：如果传递参数data，请求方式则为POST</span></span><br><span class="line">    <span class="comment"># timeout（超时时间）：如果请求超出设置的时间，不响应则抛异常</span></span><br><span class="line">    <span class="comment"># cafile：CA证书</span></span><br><span class="line">    <span class="comment"># capath：CA证书路径</span></span><br><span class="line">    <span class="comment"># cadefault：已弃用</span></span><br><span class="line">    <span class="comment"># context:类型为ssl.SSLContext类型，指定SSL设置</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, data=None, headers=&#123;&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">                 origin_req_host=None, unverifiable=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 method=None)</span>:</span></span><br><span class="line">        <span class="comment"># headers是一个字典，是请求头，构造请求时通过headers参数直接构造，或通过调用请求实例的add_header()方法添加（最常用方法是修改User-Agent来伪装浏览器）</span></span><br><span class="line">        <span class="comment"># origin_req_host：请求方的host名称/IP地址</span></span><br><span class="line">        <span class="comment"># unverifiable表示这个请求是否是无法验证，默认是False，意思是用户没有足够权限来选择接收这个请求的结果</span></span><br><span class="line">        <span class="comment"># method：字符串类型，用来指示请求使用的方法，比如GET,POST和PUT等</span></span><br></pre></td></tr></table></figure></div><h5 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h5><p>构建高级的请求，例如针对Cookie处理，代理设置的处理</p><p><strong>Hander工具简介（urllib.request.BaseHandler）</strong></p><ul><li>HTTPDefaultErrorHandler：用于处理HTTP响应错误</li><li>HTTPRedirectHandler：用于处理重定向</li><li>HTTPCookieProcessor：用于处理Cookies</li><li>ProxyHandler：用于设置代理</li><li>HTTPPasswordMgr：用于管理密码</li><li>HTTPBasicAuthHandler：用于管理认证</li></ul><p><strong>OpenerDirector（或称Opener）</strong><br>引入Opener意义：实现更高级的功能。之前的Request和urlopen()相当于类库封装好了常用请求方法，利用它们仅能完成基本请求。<br>Opener可以使用open()方法，返回类型和urlopen()一致。我们通过Handler来构建Opener</p><h5 id="实践代码"><a href="#实践代码" class="headerlink" title="实践代码"></a>实践代码</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> HTTPPasswordMgrWithDefaultRealm, HTTPBasicAuthHandler, build_opener, ProxyHandler</span><br><span class="line"></span><br><span class="line">username = <span class="string">'username'</span></span><br><span class="line">password = <span class="string">'password'</span></span><br><span class="line">url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">filename = <span class="string">'cookies.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户信息验证（网页弹出提示框输入用户信息）</span></span><br><span class="line">p = HTTPPasswordMgrWithDefaultRealm()</span><br><span class="line">p.add_password(<span class="keyword">None</span>, url, username, password)</span><br><span class="line">auth_handler = HTTPBasicAuthHandler(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加代理</span></span><br><span class="line">proxy_handler = ProxyHandler(&#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'127.0.0.1:4399'</span>,</span><br><span class="line">    <span class="string">'https'</span>: <span class="string">'127.0.0.1:4399'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存成LWP格式Cookies文件</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(url)</span><br><span class="line">cookie.save(ignore_discard=<span class="keyword">True</span>, ignore_expires=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取本都LWP格式Cookie文件请求操作</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(filename,ignore_expires=<span class="keyword">True</span>,ignore_discard=<span class="keyword">True</span>)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(url)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></div><h4 id="处理异常（error模块）"><a href="#处理异常（error模块）" class="headerlink" title="处理异常（error模块）"></a>处理异常（error模块）</h4><h5 id="URLError"><a href="#URLError" class="headerlink" title="URLError"></a>URLError</h5><p>简介：来自urllib库的error模块，继承自OSError类，是error异常模块的基类，由request模块产生的异常都可以通过这个捕获这个类来处理。<strong>它有一个属性reason（返回错误原因）</strong></p><h5 id="HTTPError"><a href="#HTTPError" class="headerlink" title="HTTPError"></a>HTTPError</h5><p>简介：它是URLError的子类，专门用来处理HTTP请求错误。<strong>它有三个属性code（返回HTTP状态码），reason（同上），headers（返回请求头）</strong></p><h5 id="实践代码-1"><a href="#实践代码-1" class="headerlink" title="实践代码"></a>实践代码</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'https://www.cuiqingcai.com/index.htm'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response = request.urlopen(filename, timeout=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.code)</span><br><span class="line">    print(e.reason)</span><br><span class="line">    print(e.headers)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'Request Successfully'</span>)</span><br><span class="line"><span class="comment"># 输出：404</span></span><br><span class="line"><span class="comment">#      Not Found</span></span><br><span class="line"><span class="comment">#      404</span></span><br><span class="line"><span class="comment">#      Server: nginx/1.10.3 (Ubuntu)</span></span><br><span class="line"><span class="comment">#      Date: Tue, 22 Jan 2019 12:21:24 GMT</span></span><br><span class="line"><span class="comment">#      Content-Type: text/html; charset=UTF-8</span></span><br><span class="line"><span class="comment">#      Transfer-Encoding: chunked</span></span><br><span class="line"><span class="comment">#      Connection: close</span></span><br><span class="line"><span class="comment">#      Vary: Cookie</span></span><br><span class="line"><span class="comment">#      Expires: Wed, 11 Jan 1984 05:00:00 GMT</span></span><br><span class="line"><span class="comment">#      Cache-Control: no-cache, must-revalidate, max-age=0</span></span><br><span class="line"><span class="comment">#      Link: &lt;https://cuiqingcai.com/wp-json/&gt;; rel="https://api.w.org/"</span></span><br></pre></td></tr></table></figure></div><h4 id="解析链接（parse模块）"><a href="#解析链接（parse模块）" class="headerlink" title="解析链接（parse模块）"></a>解析链接（parse模块）</h4><p>定义了处理URL的标准接口，实现了URL各部分的抽取，合并以及链接转换</p><h5 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse()"></a>urlparse()</h5><p><strong>实现了URL的识别和分段</strong><br>urlparse()方法URL拆分成6部分，分别是scheme，netloc，path，params，query，fragment。<br><strong>示例及其标准格式</strong><br><a href="http://www.baidu.com/index.html;user?id=5#comment" target="_blank" rel="noopener">http://www.baidu.com/index.html;user?id=5#comment</a><br>scheme://netloc(域名)/path;params(参数)?query(查询条件)#fragment(锚点，直接定位页面内部下拉位置)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urlparse</span><span class="params">(url, scheme=<span class="string">''</span>, allow_fragments=True)</span>:</span></span><br><span class="line">    <span class="comment"># scheme:默认协议（http或https等），scheme参数只有在URL中不包含scheme时生效。</span></span><br><span class="line">    <span class="comment"># allow_fragments:是否忽略fragment</span></span><br></pre></td></tr></table></figure></div><h5 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse()"></a>urlunparse()</h5><p>接收参数是一个可迭代对象，长度必须为6（传入任意数据结构的参数必须有6项数据）。<strong>将链接各部分组合成完整链接的方法</strong>。</p><h5 id="urlsplit"><a href="#urlsplit" class="headerlink" title="urlsplit()"></a>urlsplit()</h5><p>与urlparse()相似，但不再单独解析params这部分，只返回5个结果。params会合并到path中</p><h5 id="urlunsplit"><a href="#urlunsplit" class="headerlink" title="urlunsplit()"></a>urlunsplit()</h5><p>与urlunparse()类似，但长度必须为5</p><h5 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin()"></a>urljoin()</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">urljoin</span><span class="params">(base, url, allow_fragments=True)</span>:</span></span><br><span class="line">    <span class="comment"># base: 基础链接</span></span><br><span class="line">    <span class="comment"># url: 新链接</span></span><br></pre></td></tr></table></figure></div><p>该方法会分析base的scheme，netloc和path这三个内容并对新链接(url)缺失的部分进行补充，生成完整链接。<br>通过该方法，可以实现链接的解析，拼合和生成。</p><h5 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode()"></a>urlencode()</h5><p>将字典数据转化为URL的参数。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'Haha'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'93'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">base = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">url = base+urlencode(params)</span><br><span class="line">print(url)</span><br><span class="line"><span class="comment"># 输出结果：http://www.baidu.comname=Haha&amp;age=93</span></span><br></pre></td></tr></table></figure></div></p><h5 id="parse-qs"><a href="#parse-qs" class="headerlink" title="parse_qs()"></a>parse_qs()</h5><p>反序列化，将GET请求参数转回字典<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qs</span><br><span class="line"></span><br><span class="line">query = <span class="string">'name=haha&amp;age=93'</span></span><br><span class="line">print(parse_qs(query))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：&#123;'name': ['haha'], 'age': ['93']&#125;</span></span><br></pre></td></tr></table></figure></div></p><h5 id="parse-qsl"><a href="#parse-qsl" class="headerlink" title="parse_qsl()"></a>parse_qsl()</h5><p>与parse_qs()类似，但转化为元组组成的列表。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> parse_qsl</span><br><span class="line"></span><br><span class="line">query = <span class="string">'name=haha&amp;age=93'</span></span><br><span class="line">print(parse_qsl(query))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：[('name', 'haha'), ('age', '93')]</span></span><br></pre></td></tr></table></figure></div></p><h5 id="quote"><a href="#quote" class="headerlink" title="quote()"></a>quote()</h5><p>将内容转化为URL编码的格式。<br>例如URL中带有中文参数时，存在乱码问题，需要用此方法将中文字符转化为URL编码</p><h5 id="unquote"><a href="#unquote" class="headerlink" title="unquote()"></a>unquote()</h5><p>URL解码</p><h4 id="分析Robots协议（robotparser模块）"><a href="#分析Robots协议（robotparser模块）" class="headerlink" title="分析Robots协议（robotparser模块）"></a>分析Robots协议（robotparser模块）</h4><p>Robots协议也称为爬虫协议，机器人协议，全名叫作网络爬虫排除标准（Robots Exclusion Protocol），用来告诉爬虫和搜索引擎哪些页面可以抓取，哪些页面不可以抓取。它通常是一个叫作robots.txt的文本文件，一般放在网站根目录下。<br>当搜索爬虫访问一个站点时，它首先会检查这个站点根目录下是否存在robots.txt文件，如果存在，搜索爬虫会根据其中定义的爬取范围来爬取。无该文件爬虫则访问所有<strong>可直接</strong>访问的页面。</p><h5 id="常见爬虫名称"><a href="#常见爬虫名称" class="headerlink" title="常见爬虫名称"></a>常见爬虫名称</h5><p>爬虫名称：    名称：      网站：<br>BaiduSpider  百度        <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>Googlebot    谷歌        <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a><br>360Spider    360搜索     <a href="http://www.so.com" target="_blank" rel="noopener">www.so.com</a><br>YodaoBot     有道        <a href="http://www.youdao.com" target="_blank" rel="noopener">www.youdao.com</a><br>ia_archiver  Alexa       <a href="http://www.alexa.com" target="_blank" rel="noopener">www.alexa.com</a><br>Scooter      altavista   <a href="http://www.altavista.com" target="_blank" rel="noopener">www.altavista.com</a></p><h5 id="robotparser模块介绍"><a href="#robotparser模块介绍" class="headerlink" title="robotparser模块介绍"></a>robotparser模块介绍</h5><p>该模块提供了一个类RobotFileParser，它根据某网站的robots.txt文件来判断一个爬取爬虫是否有权限来爬取这个网页。</p><h5 id="urllib-robotparser-RobotFileParser"><a href="#urllib-robotparser-RobotFileParser" class="headerlink" title="urllib.robotparser.RobotFileParser"></a>urllib.robotparser.RobotFileParser</h5><p><img src="/images/网络爬虫4.png" alt=""><br>url参数可以在声明时不传入，默认为空。最后使用set_url()方法设置即可。</p><p><strong>该类方法：</strong><br><img src="/images/网络爬虫3.png" alt=""></p><ul><li>read(): 读取robots.txt文件并进行分析（<strong>执行读取操作，必须调用，无返回值</strong>）</li><li>parse(): 解析robot.txt文件</li><li>can-fetch(): 传入两参数User—agent和URL，返回的内容是该搜索引擎是否抓取这个URL，返回结果是True或False</li><li>mtime(): 返回上次抓取和分析robots.txt的时间（对长时间分析和抓取的搜索爬虫很有必要） </li><li>modified(): 将当前时间设置为上次抓取和分析robots.txt的时间</li></ul><h5 id="实践代码-2"><a href="#实践代码-2" class="headerlink" title="实践代码"></a>实践代码</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.taobao.com'</span></span><br><span class="line">total_url = urljoin(url, <span class="string">'robots.txt'</span>)</span><br><span class="line">rp = RobotFileParser(total_url)</span><br><span class="line"><span class="comment"># rp.read() # 用法同下</span></span><br><span class="line">rp.parse(urlopen(<span class="string">'https://www.taobao.com/robots.txt'</span>).read().decode(<span class="string">'ISO-8859-1'</span>).split(<span class="string">'\n'</span>))</span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, urljoin(url, <span class="string">'error.html'</span>)))  <span class="comment"># False</span></span><br><span class="line">print(rp.can_fetch(<span class="string">'*'</span>, urljoin(url, <span class="string">'index.html'</span>)))  <span class="comment"># False</span></span><br><span class="line">response = urlopen(<span class="string">'https://www.taobao.com/robots.txt'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'ISO-8859-1'</span>))</span><br><span class="line"><span class="comment"># User-agent:  Baiduspider</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Allow: /$</span></span><br><span class="line"><span class="comment"># Disallow:  /product/</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  Googlebot</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /product</span></span><br><span class="line"><span class="comment"># Allow:  /spu</span></span><br><span class="line"><span class="comment"># Allow:  /dianpu</span></span><br><span class="line"><span class="comment"># Allow:  /oversea</span></span><br><span class="line"><span class="comment"># Allow:  /list</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Allow: /$</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-agent:  Bingbot</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /product</span></span><br><span class="line"><span class="comment"># Allow:  /spu</span></span><br><span class="line"><span class="comment"># Allow:  /dianpu</span></span><br><span class="line"><span class="comment"># Allow:  /oversea</span></span><br><span class="line"><span class="comment"># Allow:  /list</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Allow: /$</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  360Spider</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  Yisouspider</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  Sogouspider</span></span><br><span class="line"><span class="comment"># Allow:  /article</span></span><br><span class="line"><span class="comment"># Allow:  /oshtml</span></span><br><span class="line"><span class="comment"># Allow:  /product</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  Yahoo!  Slurp</span></span><br><span class="line"><span class="comment"># Allow:  /product</span></span><br><span class="line"><span class="comment"># Allow:  /spu</span></span><br><span class="line"><span class="comment"># Allow:  /dianpu</span></span><br><span class="line"><span class="comment"># Allow:  /oversea</span></span><br><span class="line"><span class="comment"># Allow:  /list</span></span><br><span class="line"><span class="comment"># Allow:  /ershou</span></span><br><span class="line"><span class="comment"># Allow: /$</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># User-Agent:  *</span></span><br><span class="line"><span class="comment"># Disallow:  /</span></span><br></pre></td></tr></table></figure></div><p><strong>PS:淘宝这个dianpu有、意思233</strong></p>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络爬虫 其一</title>
      <link href="/2019/01/17/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB1/"/>
      <url>/2019/01/17/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB1/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python3网络爬虫开发实战》读书笔记"><a href="#《Python3网络爬虫开发实战》读书笔记" class="headerlink" title="《Python3网络爬虫开发实战》读书笔记"></a>《Python3网络爬虫开发实战》读书笔记</h1><h2 id="爬虫基础"><a href="#爬虫基础" class="headerlink" title="爬虫基础"></a>爬虫基础</h2><h3 id="URI-amp-URL"><a href="#URI-amp-URL" class="headerlink" title="URI&amp;URL"></a>URI&amp;URL</h3><p><img src="/images/网络爬虫1.png" alt=""></p><ul><li>URI: Uniform Resource Identifier(统一资源标志符) </li><li>URL: Universal Resource Locator(统一资源定位符)</li><li>URN: Universal Resource Name(统一资源名称)<h3 id="HTTP基本原理"><a href="#HTTP基本原理" class="headerlink" title="HTTP基本原理"></a>HTTP基本原理</h3><h4 id="HTTP-amp-HTTPS"><a href="#HTTP-amp-HTTPS" class="headerlink" title="HTTP&amp;HTTPS"></a>HTTP&amp;HTTPS</h4></li></ul><ol><li>HTTP: Hyper Text Transfer Protocol(超文本传输协议)</li><li>HTTPS: Hyper Text Transfer Protocol over Secure Socket Layer(HTTP的安全版)<br>HTTPS的安全基础是SSL，前面TLS协议有介绍（此处略）。<h3 id="网页基础"><a href="#网页基础" class="headerlink" title="网页基础"></a>网页基础</h3></li><li>HTML(Hyper Text Markup Language,超文本标记语言)<br>例：img（标签）表示图片，video表示视频，p表示段落</li><li>CSS(Cascading Style Sheets,层叠样式表)<br>层叠：在HTML中引用数个样式文件，样式发生冲突时，浏览器能依据层叠顺序处理<br>样式：网页中文字大小，颜色，元素间距，排列等格式</li><li>JavaScript<br>实现实时，动态，交互的页面功能。HTML中通过script标签引入</li></ol><h4 id="节点树"><a href="#节点树" class="headerlink" title="节点树"></a>节点树</h4><p>在HTML中，所有标签定义的内容都是节点，它们构成了一个HTML DOM树。<br><img src="/images/网络爬虫2.png" alt=""><br>节点树（如上图所示）<br><strong>通过HTML DOM，树中所有节点均可通过JavaScript访问，所有HTML节点元素均可被修改，也可被创建或删除。</strong></p><h5 id="DOM（Document-Object-Model-文档对象模型）"><a href="#DOM（Document-Object-Model-文档对象模型）" class="headerlink" title="DOM（Document Object Model,文档对象模型）"></a>DOM（Document Object Model,文档对象模型）</h5><p>定义了访问HTML和XML文档的标准</p><h5 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h5><p>CSS选择器空格分割开表示嵌套关系，不加空格表示并列关系</p><h3 id="爬虫基本原理"><a href="#爬虫基本原理" class="headerlink" title="爬虫基本原理"></a>爬虫基本原理</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>获取网页并提取保存信息的自动化程序</p><h4 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h4><ol><li>获取网页<br>构造请求发送至服务器，接收响应并解析（可使用urllib,requests等Pyton库实现）</li><li>提取信息<br>分析网页源代码提取需求数据</li></ol><ul><li>正则表达式提取（比较复杂容易出错）</li><li>根据网页节点属性，CSS选择器或Xpath来提取网页（可使用Beautiful Soup,pyquery,lxml等Pyton库实现）</li></ul><ol start="3"><li>保存数据<br>保存数据以便后续使用<h4 id="采集数据类型"><a href="#采集数据类型" class="headerlink" title="采集数据类型"></a>采集数据类型</h4>HTML，JSON，二进制数据（图片，视频，音频）<h4 id="采集JS渲染页面"><a href="#采集JS渲染页面" class="headerlink" title="采集JS渲染页面"></a>采集JS渲染页面</h4>问题：抓取源代码和浏览器中所见不一致<br>原因：网页采用Ajax,前端模块化工具构建（整个网页由JS渲染，原始HTML代码为空壳）<br>解决：分析后台Ajax接口，或使用Selenium，Splash库实现模拟JS渲染<h2 id="Session-会话-amp-Cookies"><a href="#Session-会话-amp-Cookies" class="headerlink" title="Session(会话)&amp;Cookies"></a>Session(会话)&amp;Cookies</h2>Session在服务器端，用来保存用户的会话信息。<br>Cookies在客户端，每次访问服务器附带Cookies<h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3>会话对象用来存储特定用户所需的属性及配置信息。<br>用户在应用程序的web页里跳转，存储在会话对象中的变量不会丢失。如果用户没有会话，web服务器将自动创建一个会话对象。<h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3></li></ol><ul><li>会话维持</li><li>属性结构</li><li>会话Cookie和持久Cookie<h2 id="代理的基本原理"><a href="#代理的基本原理" class="headerlink" title="代理的基本原理"></a>代理的基本原理</h2>代理指的是代理服务器（proxy server）,功能是代理网络用户去取得网络信息。<h3 id="按协议分类"><a href="#按协议分类" class="headerlink" title="按协议分类"></a>按协议分类</h3></li><li>FTP代理服务器：主要用于访问FTP服务器，一般有上传，下载以及缓存功能</li><li>HTTP代理服务器：访问网页，一般有内容过滤和缓存功能</li><li>SSL/TLS代理：加密网站，一般有SSL或TLS加密功能</li><li>RTSP代理：访问Real流媒体服务器，一般有缓存功能</li><li>Telnet代理：telnet远程控制</li><li>POP3/SMTP代理：POP3/SMTP方式收发邮件，一般有缓存功能</li><li>SOCKS代理：单纯传递数据包<h3 id="按匿名程度分类"><a href="#按匿名程度分类" class="headerlink" title="按匿名程度分类"></a>按匿名程度分类</h3></li><li>高度匿名代理</li><li>普通匿名代理</li><li>透明代理</li><li>间谍代理</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web Crawler </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《利用Python进行数据分析》（第二版）读书笔记1</title>
      <link href="/2019/01/16/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/"/>
      <url>/2019/01/16/%E3%80%8A%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h1 id="Python解释器（只介绍IPython）"><a href="#Python解释器（只介绍IPython）" class="headerlink" title="Python解释器（只介绍IPython）"></a>Python解释器（只介绍IPython）</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>通过一次执行一条语句来运行程序</p><h1 id="IPython"><a href="#IPython" class="headerlink" title="IPython"></a>IPython</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>加强版Python解释器（An enhanced Interactive Python)</p><h2 id="运行实例"><a href="#运行实例" class="headerlink" title="运行实例"></a>运行实例</h2><p><img src="/images/利用Python数据分析1.png" alt=""><br><strong>如上图所示，IPython中大多数Python对象被格式化为更可读，更美观的形式</strong></p><h2 id="Tab补全"><a href="#Tab补全" class="headerlink" title="Tab补全"></a>Tab补全</h2><p><img src="/images/利用Python数据分析2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Data Analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM知识点归整</title>
      <link href="/2019/01/01/JVM%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E6%95%B4/"/>
      <url>/2019/01/01/JVM%E7%9F%A5%E8%AF%86%E7%82%B9%E5%BD%92%E6%95%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h1><p>加载（Loading）-&gt;验证（Verification）-&gt;准备（Preparation）-&gt;解析(Resolution)-&gt;初始化(Initialization)-&gt;使用(Using)-&gt;卸载(Unloading)</p><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>将.class文件中的数据读入到内存中，放置到方法区内，同时在堆区创建一个Class对象，用来封装类在方法区内的数据结构。（<strong>Class对象向开发者提供了访问方法区数据结构的接口。</strong>）</p><h2 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h2><ul><li>本地系统中直接加载</li><li>网络下载</li><li>zip，jar文件中加载</li><li>专有数据库中提取</li><li>Java源文件动态编译</li></ul><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><ul><li>通过一个类的全限定名来获取其定义的二进制字节流</li><li>将这个字节流所代表的静态存储结构转化为方法区运行时数据结构</li><li>在Java堆中生成一个生成一个代表这个类的Class对象，作为对方法区数据结构的访问入口</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>确保Class文件的字节流包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全</p><h3 id="具体检测动作"><a href="#具体检测动作" class="headerlink" title="具体检测动作"></a>具体检测动作</h3><ul><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li><li>符号引用验证</li></ul>]]></content>
      
      
      <categories>
          
          <category> Virtual Machine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TLS协议</title>
      <link href="/2018/12/27/TLS%E5%8D%8F%E8%AE%AE/"/>
      <url>/2018/12/27/TLS%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章主要用于应付《网络安全协议期末》考试</p><h1 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h1><p><img src="/images/TLS-1.png" alt=""></p><h1 id="发展过程"><a href="#发展过程" class="headerlink" title="发展过程"></a>发展过程</h1><p>SSL:Secure Socket Layer</p><ul><li>主要用于web的安全传输协议</li><li>SSL1.0-&gt;SSL3.0</li></ul><p>TLS:Transportation Layer Security</p><ul><li>SSL3.0-&gt;TLS1.0-&gt;TLS1.2-&gt;TLS1.3</li></ul><p>主要驱动因素略（无非就是商业竞争和协议自身不够完善）</p><h1 id="协议概述"><a href="#协议概述" class="headerlink" title="协议概述"></a>协议概述</h1><p><img src="/images/TLS-2.png" alt=""></p><h2 id="Record-Protocol（记录协议）"><a href="#Record-Protocol（记录协议）" class="headerlink" title="Record Protocol（记录协议）"></a>Record Protocol（记录协议）</h2><p>安全服务：Confidentiality（保密性），Integrity（完整性）<br>对<strong>握手协议（Handshake Protocol）</strong>协商需要的安全参数在传输过程中提供保密性和完整性保护</p><ul><li>分片</li><li>压缩</li><li>加密</li><li>MAC</li></ul><h3 id="功能目标"><a href="#功能目标" class="headerlink" title="功能目标"></a>功能目标</h3><p><img src="/images/TLS-5.png" alt=""><br><img src="/images/TLS-6.png" alt=""></p><h3 id="封装过程"><a href="#封装过程" class="headerlink" title="封装过程"></a>封装过程</h3><p><img src="/images/TLS-7.png" alt=""><br><img src="/images/TLS-8.png" alt=""><br><img src="/images/TLS-9.png" alt=""><br><img src="/images/TLS-10.png" alt=""></p><h2 id="Handshake-Protocol"><a href="#Handshake-Protocol" class="headerlink" title="Handshake Protocol"></a>Handshake Protocol</h2><p>用于客户端和服务器端协商，记录协议中所使用的密码算法和共享密钥，证书认证</p><p>安全参数如下：</p><ul><li>密码套件</li><li>Premaster secret（预主密钥）</li><li>身份认证</li></ul><p><img src="/images/TLS-11.png" alt=""><br><img src="/images/TLS-12.png" alt=""><br><img src="/images/TLS-13.png" alt=""><br><img src="/images/TLS-14.png" alt=""></p><h3 id="HelloRequest"><a href="#HelloRequest" class="headerlink" title="HelloRequest"></a>HelloRequest</h3><p>是一个简单的通知，告诉clienct应该重新开始一个协商过程。作为响应，client应该在合适的时候发送ClientHello消息。如果client当前正在协商一个会话，则该消息会被忽略。<br><img src="/images/TLS-15.png" alt=""><br><img src="/images/TLS-16.png" alt=""><br><img src="/images/TLS-17.png" alt=""><br><img src="/images/TLS-18.png" alt=""><br><img src="/images/TLS-19.png" alt=""><br><img src="/images/TLS-20.png" alt=""><br><img src="/images/TLS-21.png" alt=""><br><img src="/images/TLS-22.png" alt=""><br><img src="/images/TLS-23.png" alt=""></p><h2 id="ChangeCipherSpec-Protocol"><a href="#ChangeCipherSpec-Protocol" class="headerlink" title="ChangeCipherSpec Protocol"></a>ChangeCipherSpec Protocol</h2><p>发信号给通信对端，表示要切换到新协商确定的密码规格</p><h2 id="Alert-Protocol"><a href="#Alert-Protocol" class="headerlink" title="Alert Protocol"></a>Alert Protocol</h2><ul><li>传递协议运行时出现的警报。对警报细节的描述（报告错误）</li><li>fatal级别的警报会导致连接立即终止（通知连接关闭）<br><img src="/images/TLS-24.png" alt=""></li></ul><h2 id="Application-Data-Protocol"><a href="#Application-Data-Protocol" class="headerlink" title="Application Data Protocol"></a>Application Data Protocol</h2><p>给Record层提供application data用于传输<br><img src="/images/TLS-25.png" alt=""></p><h1 id="TLS描述语言"><a href="#TLS描述语言" class="headerlink" title="TLS描述语言"></a>TLS描述语言</h1><p>语言类似于C，仅用于TLS</p><h2 id="基本原则：（死规定）"><a href="#基本原则：（死规定）" class="headerlink" title="基本原则：（死规定）"></a>基本原则：（死规定）</h2><ul><li>基本数据块大小为一字节，8比特（8bits）</li><li>注释用/<em>注释内容</em>/</li><li>“[[]]”表示可选部件</li><li>单字节实体，无具体含义数据类型为opaque</li><li>定长向量：T T’[n]; T为数据类型， T’是向量名称，n是向量中字节数</li><li>uint8 foo[4] /<em>4个单字节整数</em>/ uint16 foo[4] /<em>2个双字节整数</em>/</li><li>变长向量：T T’&lt;floor..ceiling&gt;; T为数据类型， T’是向量名称，floor,ceiling分别表示所占字节数的下界和上界</li><li>uint32 number&lt;4..20&gt;; 变长数组number最少4个字节最多20个字节</li><li>枚举:enum{e1(v1),e2(v2),…,en(vn)[[,n]]} Te; Te变量名，e1-en是Te可能取值； v1-vn是为e1-en指定一个具体指代数值；n表示可取值的个数；</li></ul><p><img src="/images/TLS-3.png" alt=""></p><p><img src="/images/TLS-4.png" alt=""></p><h1 id="TLS-Cipher-Suite"><a href="#TLS-Cipher-Suite" class="headerlink" title="TLS Cipher Suite"></a>TLS Cipher Suite</h1><p><img src="/images/TLS-26.png" alt=""><br><img src="/images/TLS-27.png" alt=""></p><h1 id="HTTP-amp-HTTPS"><a href="#HTTP-amp-HTTPS" class="headerlink" title="HTTP&amp;HTTPS"></a>HTTP&amp;HTTPS</h1><p><img src="/images/TLS-28.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Security Protocol </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Protocol </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的深度/广度优先算法</title>
      <link href="/2018/12/20/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/"/>
      <url>/2018/12/20/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6-%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abnor18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span></span>&#123;</span><br><span class="line">    <span class="comment">//顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> vertexSize;</span><br><span class="line">    <span class="comment">//边数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numOfEdges;</span><br><span class="line">    <span class="comment">//顶点数组</span></span><br><span class="line">    <span class="keyword">private</span> Object[] vertex;</span><br><span class="line">    <span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[][] edges;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//访问数组</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] visitedvertex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Graph</span><span class="params">(<span class="keyword">int</span> vertexSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vertexSize = vertexSize;</span><br><span class="line">        vertex = <span class="keyword">new</span> Object[vertexSize];</span><br><span class="line">        visitedvertex = <span class="keyword">new</span> <span class="keyword">boolean</span>[vertexSize];</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="keyword">int</span>[vertexSize][vertexSize];</span><br><span class="line">        numOfEdges = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置访问过该顶点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisitedvertex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.visitedvertex[index] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isVisited</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;<span class="keyword">return</span> visitedvertex[index];&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顶点Getter&amp;Setter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVertex</span><span class="params">(String[] vertex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.vertex = vertex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVertexSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vertexSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getVertex()&#123;</span><br><span class="line">        <span class="keyword">return</span> vertex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEdge</span><span class="params">(<span class="keyword">int</span> index1,<span class="keyword">int</span> index2,<span class="keyword">int</span> weight)</span> </span>&#123;</span><br><span class="line">        edges[index1][index2]=weight;</span><br><span class="line">        numOfEdges++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEdge</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line">        edges[v1][v2]=<span class="number">0</span>;</span><br><span class="line">        numOfEdges--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回两顶点可达边的权值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(<span class="keyword">int</span> index1,<span class="keyword">int</span> index2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> edges[index1][index2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结点i的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValueByIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> vertex[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到第一个邻接结点的下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirstNeighbor</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vertex.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edges[index][j]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据前一个邻接结点的下标来取得下一个邻接结点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNextNeighbor</span><span class="params">(<span class="keyword">int</span> v1,<span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=v2+<span class="number">1</span>;j&lt;vertex.length;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edges[v1][j]&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//深度优先算法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">depthFirstSearch</span><span class="params">(<span class="keyword">boolean</span>[] visitedvertex,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> NextNoVisited;</span><br><span class="line">        System.out.print(getValueByIndex(i)+<span class="string">" "</span>);</span><br><span class="line">        setVisitedvertex(i);</span><br><span class="line">        <span class="keyword">for</span>(NextNoVisited = getFirstNeighbor(i);NextNoVisited!=-<span class="number">1</span>;NextNoVisited=getNextNeighbor(i,NextNoVisited))&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isVisited(NextNoVisited))&#123;</span><br><span class="line">                depthFirstSearch(visitedvertex,NextNoVisited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">depthFirstSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;getVertexSize();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (!isVisited(i))&#123;</span><br><span class="line">                depthFirstSearch(visitedvertex,i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//广度优先遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">broadFirstSearch</span><span class="params">(<span class="keyword">boolean</span>[] visitedvertex,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> u,w;</span><br><span class="line">        LinkedList&lt;Integer&gt; queue=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        System.out.print(getValueByIndex(i)+<span class="string">"  "</span>);</span><br><span class="line">        setVisitedvertex(i);</span><br><span class="line">        <span class="keyword">for</span> (queue.addFirst(i);!queue.isEmpty();) &#123;</span><br><span class="line">            u= queue.removeFirst();</span><br><span class="line">            w=getFirstNeighbor(u);</span><br><span class="line">            <span class="keyword">while</span>(w!=-<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!isVisited(w)) &#123;</span><br><span class="line">                    System.out.print(getValueByIndex(w)+<span class="string">"  "</span>);</span><br><span class="line">                    setVisitedvertex(w);</span><br><span class="line">                    <span class="comment">//入队列</span></span><br><span class="line">                    queue.addLast(w);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//寻找下一个邻接结点</span></span><br><span class="line">                w=getNextNeighbor(u, w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">broadFirstSearch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;getVertexSize();i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!isVisited(i)) &#123;</span><br><span class="line">                broadFirstSearch(visitedvertex, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphOperation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numofedges = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">int</span> verSize = <span class="number">4</span>;</span><br><span class="line">        Graph g = <span class="keyword">new</span> Graph(<span class="number">4</span>);</span><br><span class="line">        String[] nodes = &#123;<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"D"</span>&#125;;</span><br><span class="line">        g.setVertex(nodes);</span><br><span class="line">        g.setEdge(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        g.setEdge(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        g.setEdge(<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line"><span class="comment">//        g.depthFirstSearch();</span></span><br><span class="line">        g.broadFirstSearch();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表操作整理</title>
      <link href="/2018/11/26/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/"/>
      <url>/2018/11/26/%E9%93%BE%E8%A1%A8%E6%93%8D%E4%BD%9C%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abnor18;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表结构</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//顺序打印各结点值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.print(head.getValue()+<span class="string">", "</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetListLength</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> GetLength(head);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归做法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">GetLength</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+GetLength(head.next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转链表</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ReverseList</span><span class="params">(Node head)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>||head.next == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        Node newhead = ReverseList(head.next); <span class="comment">//到达尾结点时跳出</span></span><br><span class="line">        <span class="comment">//刚跳出时 栈顶方法内局部变量&#123; head：尾结点前一结点，head.next：尾结点&#125;</span></span><br><span class="line">        head.next.next = head;</span><br><span class="line">        <span class="comment">//防止循环链表</span></span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//每次递归都返回尾节点</span></span><br><span class="line">        <span class="keyword">return</span> newhead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找倒数第K个结点</span></span><br><span class="line">    <span class="comment">//实现思路：双指针pre,back,back先走到第K个结点，pre仍在第一个结点，</span></span><br><span class="line">    <span class="comment">//然后同时向后走，back到达尾结点时，pre正好在倒数第K个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">GetKNode1</span><span class="params">(Node head,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">0</span>||head==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node pre = head;</span><br><span class="line">        Node back =head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//back到达第K个结点</span></span><br><span class="line">        <span class="keyword">int</span> isarrive = k;</span><br><span class="line">        <span class="keyword">while</span> (k&gt;<span class="number">1</span> &amp;&amp; back!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            back = back.next;</span><br><span class="line">            isarrive = --k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断能否到达第K个结点</span></span><br><span class="line">        <span class="keyword">if</span> (isarrive==<span class="number">1</span>&amp;&amp;back==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (back.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            back = back.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归合并有序链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">MergeSortedList</span><span class="params">(Node head1, Node head2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (head2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head1;</span><br><span class="line">        &#125;</span><br><span class="line">        Node mergeHead = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">int</span>)head1.getValue() &lt; (<span class="keyword">int</span>)head2.getValue()) &#123;</span><br><span class="line">            mergeHead = head1;</span><br><span class="line">            mergeHead.next = MergeSortedList(head1.next, head2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mergeHead = head2;</span><br><span class="line">            mergeHead.next = MergeSortedList(head1, head2.next);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeHead;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        LinkedList ll = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        Node head = <span class="keyword">new</span> Node(<span class="number">5</span>);</span><br><span class="line">        Node node2 = <span class="keyword">new</span> Node(<span class="number">3</span>);</span><br><span class="line">        Node node3 = <span class="keyword">new</span> Node(<span class="number">27</span>);</span><br><span class="line">        Node last = <span class="keyword">new</span> Node(<span class="number">14</span>);</span><br><span class="line">        head.next = node2;</span><br><span class="line">        node2.next = node3;</span><br><span class="line">        node3.next = last;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Node newhead = ll.ReverseList(head);</span></span><br><span class="line">        <span class="comment">//System.out.println(ll.GetListLength(head));</span></span><br><span class="line">        <span class="comment">//ll.PrintList(ll.MergeSortedList(head,head2));</span></span><br><span class="line">        <span class="comment">//System.out.println(ll.GetKNode1(head,5).getValue());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2018/11/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/11/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abnor18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="comment">//构造方法私有化，故除本类外其他类不能直接new该类对象。</span></span><br><span class="line">    <span class="comment">// 本类应用静态方法或静态成员得到构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一层if是为了避免每次调用方法都要加锁判断是否实例化</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">                <span class="comment">//第二层if是为了解决多线程进入后new多个对象的问题</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer-数值的整数次方</title>
      <link href="/2018/11/14/%E5%89%91%E6%8C%87offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
      <url>/2018/11/14/%E5%89%91%E6%8C%87offer-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abnor18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Algorithmimpl1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//剑指offer 面试题16 数值的整数次方</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下方法不考虑指数为0或负数，底数为0的情况</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power1</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line"><span class="comment">//        double result = 1.0;</span></span><br><span class="line"><span class="comment">//        for(int i = 1;i&lt;= exponent;i++)&#123;</span></span><br><span class="line"><span class="comment">//            result = result*base;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return result;</span></span><br><span class="line">        <span class="keyword">if</span> (exponent == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> base*Power1(base,exponent-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以下方法解决上述问题，但不高效</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//double精度问题，不能用==直接判断</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">equal</span><span class="params">(<span class="keyword">double</span> num1,<span class="keyword">double</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((num1-num2&gt;-<span class="number">0.000001</span>)&amp;&amp;(num1-num2&lt;<span class="number">0.000001</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">powercalculator</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt; exponent;i++)&#123;</span><br><span class="line">            result = result*base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Power2</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (equal(base,<span class="number">0.0</span>)&amp;&amp;exponent&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"输入为0的负整数次幂"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (equal(exponent,<span class="number">0.0</span>)) &#123;<span class="keyword">return</span> <span class="number">1.0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span> (exponent&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> powercalculator(base,exponent);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> powercalculator(<span class="number">1.0</span>/base,-exponent);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解决了上述问题且高效</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">Power3</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exponent)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (equal(base,<span class="number">0.0</span>)&amp;&amp;exponent&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"输入为0的负整数次幂"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (equal(exponent,<span class="number">0.0</span>)) &#123;<span class="keyword">return</span> <span class="number">1.0</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(equal(exponent,<span class="number">1.0</span>))</span><br><span class="line">            <span class="keyword">return</span> base;</span><br><span class="line">        <span class="keyword">if</span> (exponent&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">double</span> result = Power3(base, exponent &gt;&gt; <span class="number">1</span>); <span class="comment">// &gt;&gt;意义为除以2，位运算符效率高</span></span><br><span class="line">            result *= result;</span><br><span class="line">            <span class="keyword">if</span> ((exponent &amp; <span class="number">0x1</span>) == <span class="number">1</span>) <span class="comment">//判断是否为奇数</span></span><br><span class="line">                result *= base;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> result = Power3(base, -exponent &gt;&gt; <span class="number">1</span>); <span class="comment">// &gt;&gt;意义为除以2，位运算符效率高</span></span><br><span class="line">            result *= result;</span><br><span class="line">            <span class="keyword">if</span> ((exponent &amp; <span class="number">0x1</span>) == <span class="number">1</span>) <span class="comment">//判断是否为奇数</span></span><br><span class="line">                result *= base;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>/result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Algorithmimpl1 al = <span class="keyword">new</span> Algorithmimpl1();</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = al.Power3(<span class="number">2</span>,-<span class="number">3</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer_矩阵中的路径</title>
      <link href="/2018/11/12/%E5%89%91%E6%8C%87offer-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
      <url>/2018/11/12/%E5%89%91%E6%8C%87offer-%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.abnor18;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Algorithmimpl1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//剑指offer 面试题12 矩阵中的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断路径是否存在的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">HasPath</span><span class="params">(<span class="keyword">char</span>[] matrix, <span class="keyword">int</span> rows,<span class="keyword">int</span> cols, <span class="keyword">char</span>[] target_str)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判空，矩阵数组长度是否等于行列之积</span></span><br><span class="line">        <span class="keyword">if</span> (matrix==<span class="keyword">null</span>||matrix.length == <span class="number">0</span>||rows&lt;=<span class="number">0</span>||cols&lt;=<span class="number">0</span>||matrix.length!=rows*cols||target_str == <span class="keyword">null</span>|| target_str.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//标识路径占用某格子</span></span><br><span class="line">        <span class="keyword">boolean</span>[] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[rows*cols];</span><br><span class="line">        <span class="comment">//标识已找到路径长度</span></span><br><span class="line">        <span class="keyword">int</span> pathlength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//嵌套循环，模拟找路径过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>;r&lt;=rows-<span class="number">1</span>;r++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c=<span class="number">0</span>;c&lt;=cols-<span class="number">1</span>;c++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (HasPathCore(matrix,rows,cols,r,c,target_str,pathlength,visited))&#123;<span class="keyword">return</span> <span class="keyword">true</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">HasPathCore</span><span class="params">(<span class="keyword">char</span>[] matrix,<span class="keyword">int</span> rows,<span class="keyword">int</span> cols,<span class="keyword">int</span> row,<span class="keyword">int</span> col,<span class="keyword">char</span>[] targer_str,<span class="keyword">int</span> pathlength,<span class="keyword">boolean</span>[] visited)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(row&gt;=<span class="number">0</span> &amp;&amp; row&lt;rows &amp;&amp; col&gt;=<span class="number">0</span> &amp;&amp; col&lt;cols &amp;&amp; !visited[row*cols+col] &amp;&amp; matrix[row*cols+col]==targer_str[pathlength]) &#123;</span><br><span class="line">            pathlength++ ;</span><br><span class="line">            visited[row*cols+col] = <span class="keyword">true</span> ;</span><br><span class="line">            <span class="keyword">if</span>(pathlength==targer_str.length) &#123; <span class="keyword">return</span> <span class="keyword">true</span> ; &#125;</span><br><span class="line">            flag =  HasPathCore(matrix, rows, cols, row, col+<span class="number">1</span>, targer_str, pathlength ,visited)  ||</span><br><span class="line">                    HasPathCore(matrix, rows, cols, row+<span class="number">1</span>, col, targer_str,pathlength ,visited)  ||</span><br><span class="line">                    HasPathCore(matrix, rows, cols, row, col-<span class="number">1</span>, targer_str,pathlength ,visited)  ||</span><br><span class="line">                    HasPathCore(matrix, rows, cols, row-<span class="number">1</span>, col, targer_str,pathlength ,visited) ;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">                pathlength-- ;</span><br><span class="line">                visited[row*cols+col] = <span class="keyword">false</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> flag ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"bfce"</span>;</span><br><span class="line">        String ms = <span class="string">"abtgcfcsjdeh"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] str = s.trim().toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] matrix = ms.trim().toCharArray();</span><br><span class="line">        Algorithmimpl1 al = <span class="keyword">new</span> Algorithmimpl1();</span><br><span class="line">        System.out.println(al.HasPath(matrix,<span class="number">3</span>,<span class="number">4</span>,str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法汇总</title>
      <link href="/2018/11/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/"/>
      <url>/2018/11/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="各种排序算法的时间复杂度"><a href="#各种排序算法的时间复杂度" class="headerlink" title="各种排序算法的时间复杂度"></a>各种排序算法的时间复杂度</h1><p><img src="/images/排序算法汇总1.png" alt=""></p><h1 id="排序算法具体代码"><a href="#排序算法具体代码" class="headerlink" title="排序算法具体代码"></a>排序算法具体代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllSort</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">91</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">13</span>&#125;; <span class="comment">// 9</span></span><br><span class="line">        len = array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = array[a];</span><br><span class="line">        array[a] = array[b];</span><br><span class="line">        array[b] = temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"["</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == len - <span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(array[i]+<span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                System.out.print(array[i] + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。</span></span><br><span class="line"><span class="comment">     * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</span></span><br><span class="line"><span class="comment">     * 针对所有的元素重复以上的步骤，除了最后一个。</span></span><br><span class="line"><span class="comment">     * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="comment">//    //冒泡优化1，加入判断标志量，某次循环不交换则表明已经有序</span></span><br><span class="line"><span class="comment">//    private void BubbleSort()&#123;</span></span><br><span class="line"><span class="comment">//        for (int i=0; i&lt;len-1; i++)&#123;</span></span><br><span class="line"><span class="comment">//            boolean exchange = false;</span></span><br><span class="line"><span class="comment">//            for (int j=1;j&lt;len-i;j++)&#123;</span></span><br><span class="line"><span class="comment">//                if (array[j-1]&gt;array[j])&#123;</span></span><br><span class="line"><span class="comment">//                    swap(j-1, j);</span></span><br><span class="line"><span class="comment">//                    exchange = true;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (!exchange) break;</span></span><br><span class="line"><span class="comment">//            System.out.print("第"+(i+1)+"轮排序: ");</span></span><br><span class="line"><span class="comment">//            display();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//冒泡优化2，加入标志量,每次循环判断到 上一次循环时 交换的最后一位的前一位</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> endpoint = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (endpoint&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=endpoint;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array[i-<span class="number">1</span>]&gt;array[i])&#123;</span><br><span class="line">                    swap(i-<span class="number">1</span>, i);</span><br><span class="line">                    pos = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            endpoint = pos-<span class="number">1</span>;</span><br><span class="line">            System.out.print(<span class="string">"第"</span>+(counter++)+<span class="string">"轮排序: "</span>);</span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序</span></span><br><span class="line"><span class="comment">     * 在要排序的一组数中，选出最小的一个数与第一个位置的数交换，</span></span><br><span class="line"><span class="comment">     * 然后在剩下的数当中再找最小的与第二个位置的数交换，</span></span><br><span class="line"><span class="comment">     * 如此循环到倒数第二个数和最后一个数比较为止。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="comment">//    private void SelectionSort() &#123;</span></span><br><span class="line"><span class="comment">//        int minPoint ;</span></span><br><span class="line"><span class="comment">//        int counter = 1;</span></span><br><span class="line"><span class="comment">//        for (int i=0;i&lt;len-1;i++)&#123;</span></span><br><span class="line"><span class="comment">//            minPoint=i;</span></span><br><span class="line"><span class="comment">//            for (int j = i+1;j&lt;len;j++)&#123;</span></span><br><span class="line"><span class="comment">//                if (array[j]&lt;array[minPoint]) &#123;</span></span><br><span class="line"><span class="comment">//                    minPoint = j;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (minPoint != i)&#123;</span></span><br><span class="line"><span class="comment">//                swap(minPoint,i);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.print("第"+(counter++)+"轮排序: ");</span></span><br><span class="line"><span class="comment">//            display();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//选择优化1，一次循环同时判断最小值和最大值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> minpoint ;</span><br><span class="line">        <span class="keyword">int</span> maxpoint;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            minpoint=i;</span><br><span class="line">            maxpoint=len-<span class="number">1</span>-i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;len-i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j]&lt;array[minpoint])&#123;</span><br><span class="line">                    minpoint = j;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (array[j]&gt;array[maxpoint])&#123;</span><br><span class="line">                    maxpoint = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minpoint!=i)&#123;</span><br><span class="line">                swap(minpoint,i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxpoint!=len-<span class="number">1</span>-i)&#123;</span><br><span class="line">                swap(maxpoint,len-<span class="number">1</span>-i);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"第"</span>+(counter++)+<span class="string">"轮排序: "</span>);</span><br><span class="line">            display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序</span></span><br><span class="line"><span class="comment">     * 每步将一个待排序的记录，</span></span><br><span class="line"><span class="comment">     * 按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），</span></span><br><span class="line"><span class="comment">     * 直到全部插入排序完为止。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line"><span class="comment">//    private void InsectionSort() &#123;</span></span><br><span class="line"><span class="comment">//        int counter = 1;</span></span><br><span class="line"><span class="comment">//        for (int i=1;i&lt;len;i++)&#123;</span></span><br><span class="line"><span class="comment">//            int waiting_sort_item = array[i];</span></span><br><span class="line"><span class="comment">//            int insertPoint = i-1;</span></span><br><span class="line"><span class="comment">//            while (insertPoint&gt;=0 &amp;&amp; array[insertPoint]&gt;waiting_sort_item)&#123;</span></span><br><span class="line"><span class="comment">//                array[insertPoint+1]=array[insertPoint];</span></span><br><span class="line"><span class="comment">//                insertPoint--;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            array[insertPoint+1] = waiting_sort_item; //插入</span></span><br><span class="line"><span class="comment">//            System.out.print("第"+(counter++)+"轮排序: ");</span></span><br><span class="line"><span class="comment">//            display();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="comment">//插入优化1，查找插入点采用2分查找</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InsectionSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> waiting_sort_item = array[i];</span><br><span class="line">            <span class="keyword">if</span> (waiting_sort_item&lt;array[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">int</span> indexofInsection = binarySearch(<span class="number">0</span>,i-<span class="number">1</span>,waiting_sort_item);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&gt;indexofInsection;j--)&#123;</span><br><span class="line">                    array[j]=array[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                array[indexofInsection] = waiting_sort_item;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"第"</span>+(counter++)+<span class="string">"轮排序: "</span>);</span><br><span class="line">            display();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target_item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentindex;</span><br><span class="line">        <span class="keyword">while</span> (low&lt;high)&#123;</span><br><span class="line">            currentindex = (low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (target_item&lt;array[currentindex])&#123;</span><br><span class="line">                high = currentindex-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                low = currentindex+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     * 先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，</span></span><br><span class="line"><span class="comment">     * 待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> gap = array.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; array.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= gap; j -= gap)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(array[j] &lt; array[j - gap])<span class="comment">//由小到大排序</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        swap(j,j-gap);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 从数列中取出一个数作为基准数（枢轴，pivot）。</span></span><br><span class="line"><span class="comment">     * 将数组进行划分(partition，“挖坑”和“填坑”)，将比基准数大的元素都移至枢轴右边，将小于等于基准数的元素都移至枢轴左边。</span></span><br><span class="line"><span class="comment">     * 再对左右的子区间重复第二步的划分操作，直至每个子区间只有一个元素。</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = left, j = right;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt; tmp)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; tmp)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[j] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = tmp;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = array;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> division = partition(arr, left, right);</span><br><span class="line">        QuickSort(left, division - <span class="number">1</span>);</span><br><span class="line">        QuickSort(division + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        AllSort as = <span class="keyword">new</span> AllSort();</span><br><span class="line"><span class="comment">//        as.BubbleSort();</span></span><br><span class="line"><span class="comment">//        as.SelectionSort();</span></span><br><span class="line"><span class="comment">//        as.InsectionSort();</span></span><br><span class="line"><span class="comment">//        as.ShellSort();</span></span><br><span class="line"><span class="comment">//        as.QuickSort(0,as.getArray().length-1);</span></span><br><span class="line">        as.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="快排代码参考（推荐阅读）"><a href="#快排代码参考（推荐阅读）" class="headerlink" title="快排代码参考（推荐阅读）"></a>快排代码参考（推荐阅读）</h1><p><a href="https://www.sczyh30.com/posts/Algorithm/algorithm-quicksort/" title="sczyh30的博客" target="_blank" rel="noopener"><strong>sczyh30的博客</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFDP-2-观察者模式</title>
      <link href="/2018/07/25/HFDP-2-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/07/25/HFDP-2-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章是对HFDP第一版有关观察者模式的笔记和个人理解</p><p><a href="https://stackoverflow.com/questions/46380073/observer-is-deprecated-in-java-9-what-should-we-use-instead-of-it" target="_blank" rel="noopener">https://stackoverflow.com/questions/46380073/observer-is-deprecated-in-java-9-what-should-we-use-instead-of-it</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><h1 id="原需求"><a href="#原需求" class="headerlink" title="原需求"></a>原需求</h1>]]></content>
      
      
      <categories>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HFDP策略模式</title>
      <link href="/2018/06/23/HFDP-1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/06/23/HFDP-1-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章是对HFDP第一版有关策略模式的笔记和个人理解</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p><strong>策略模式</strong>定义了算法族，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户</p><h1 id="原需求"><a href="#原需求" class="headerlink" title="原需求"></a>原需求</h1><p>让各种鸭子继承Duck（超）类</p><p><img src="/images/策略模式1.png" alt=""></p><h1 id="新需求：让鸭子飞"><a href="#新需求：让鸭子飞" class="headerlink" title="新需求：让鸭子飞"></a>新需求：让鸭子飞</h1><h3 id="错误处理一："><a href="#错误处理一：" class="headerlink" title="错误处理一："></a>错误处理一：</h3><p>Duck（父类）中加入fly()方法，让所有子类继承</p><p><img src="/images/策略模式2.png" alt=""></p><h3 id="错误原因分析："><a href="#错误原因分析：" class="headerlink" title="错误原因分析："></a>错误原因分析：</h3><p>并非Duck所有子类都会飞（<strong>并非所有子类都有该行为</strong>）</p><h3 id="错误处理二："><a href="#错误处理二：" class="headerlink" title="错误处理二："></a>错误处理二：</h3><p>将动态方法fly()放入对应接口中，让需要的子类继承并实现此接口</p><p><img src="/images/策略模式3.png" alt=""></p><h3 id="错误原因分析：-1"><a href="#错误原因分析：-1" class="headerlink" title="错误原因分析："></a>错误原因分析：</h3><p>代码无法复用</p><h3 id="策略模式处理方法："><a href="#策略模式处理方法：" class="headerlink" title="策略模式处理方法："></a>策略模式处理方法：</h3><ol><li>分开变化和不会变化的部分，动态方法的具体实现放入对应的某组类中</li></ol><p><img src="/images/策略模式4.png" alt=""></p><ol start="2"><li>针对接口编程，而不是针对实现编程。行为由（动态方法对应的那组类）“行为类”来实现</li></ol><p><img src="/images/策略模式5.png" alt=""></p><h3 id="策略模式具体做法"><a href="#策略模式具体做法" class="headerlink" title="策略模式具体做法"></a>策略模式具体做法</h3><p>鸭子将动态方法的具体实现委托给“行为类”</p><p><img src="/images/策略模式6.png" alt=""></p><p>委托过程的具体代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Duck</span> </span>&#123; </span><br><span class="line">  QuackBehavior quackBehavior;</span><br><span class="line">  FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span></span>&#123;</span><br><span class="line">  quackBehavior.quack();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span></span>&#123;</span><br><span class="line">  flyBehavior.fly();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 还有更多</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>子类继承父类时，子类构造器实现委托给具体某一动态类的功能，代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span></span>&#123; </span><br><span class="line">    quackBehavior = <span class="keyword">new</span> Quack();<span class="comment">// 呱呱叫;</span></span><br><span class="line">    flyBehavior = <span class="keyword">new</span> FlyWithWings();<span class="comment">// 鸭子飞;</span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">//display()在Duck中是抽象的  </span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.print(<span class="string">"I'm a real Mallard duck"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="让鸭子动态设定行为"><a href="#让鸭子动态设定行为" class="headerlink" title="让鸭子动态设定行为"></a>让鸭子动态设定行为</h1><p>原来设定鸭子的具体行为要在鸭子子类构造器中委托给具体对象，想改变鸭子的行为不容易，故在Duck类中加入新方法，代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior fb)</span></span>&#123;</span><br><span class="line">flyBehavior = fb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior qb)</span></span>&#123;</span><br><span class="line">quackBehavior = qb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Duck类最终设计"><a href="#Duck类最终设计" class="headerlink" title="Duck类最终设计"></a>Duck类最终设计</h3><p><img src="/images/策略模式7.png" alt=""></p><p>自此，子类只需调用setter方法就能随时改变行为，并满足上述需求</p>]]></content>
      
      
      <categories>
          
          <category> Design Patterns </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网的正确姿势</title>
      <link href="/2018/06/14/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/06/14/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>简略介绍如何以正确的姿态科学上网</p><h1 id="科学上网定义-amp-原因"><a href="#科学上网定义-amp-原因" class="headerlink" title="科学上网定义&amp;原因"></a>科学上网定义&amp;原因</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>绕过互联网审查封锁技术（IP封锁、端口封锁、关键词过滤、域名劫持等），实现对网络内容的访问</p></blockquote><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>GFW——万恶之源，解释及实现原理估计你在搜其他教程时已略知一二了，这里就不介绍了</p><h1 id="如何科学上网"><a href="#如何科学上网" class="headerlink" title="如何科学上网"></a>如何科学上网</h1><p>以下部分针对两种不同需求的群体分别推荐</p><h2 id="谷歌浏览器成瘾患者"><a href="#谷歌浏览器成瘾患者" class="headerlink" title="谷歌浏览器成瘾患者"></a>谷歌浏览器成瘾患者</h2><p>自行向服务器商购买虚拟服务器搭建shadowsocks，目前本人购买的是VULTR的2.5$/月，鉴于VULTR没有被墙，购买及具体配置自行百度（因为懒</p><h2 id="偶尔探索新世界（不存在的网站）"><a href="#偶尔探索新世界（不存在的网站）" class="headerlink" title="偶尔探索新世界（不存在的网站）"></a>偶尔探索新世界（不存在的网站）</h2><p>1免费VPN&amp;付费VPN,这里就不推荐了（毕竟没广告费</p><p>2推荐一个ss（shadowsocks）分享的站点：<a href="https://ssr.plus/46.html#respond" title="免费ss账号" target="_blank" rel="noopener">免费ss账号</a><br>两小时更新一次配置文件，鉴于用户需求应该够了</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" title="windows版本的shadowsocks客户端" target="_blank" rel="noopener">windows版本的shadowsocks客户端</a>，自行下载。</p><p>一般VPN都有如下类型可供选择，选择shadowsocks(R)配置即可</p><p><img src="/images/科学上网1.jpg" alt=""></p><p>由于网上教程太多（懒），其他的翻墙姿势自行百度</p><p>留个wechat：h3282972032,不懂请联系</p><p># 以上内容待补充。。。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/20/hello-world/"/>
      <url>/2018/05/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p># 博客由Hexo（NexT主题）GithubPages搭建</p><p># 博客目前打算从个人学习笔记和生活两方面来记录</p><p># 待补充…</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
